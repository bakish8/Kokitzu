{"ast":null,"code":"var _jsxFileName = \"/Users/omribakish/Desktop/CryptoGraphQL/client/src/contexts/WalletContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext();\nexport const useWallet = () => {\n  _s();\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletProvider\");\n  }\n  return context;\n};\n_s(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WalletProvider = ({\n  children\n}) => {\n  _s2();\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n  const [balance, setBalance] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n\n  // Check if MetaMask is installed\n  const isMetaMaskInstalled = () => {\n    return typeof window !== \"undefined\" && window.ethereum && window.ethereum.isMetaMask;\n  };\n\n  // Connect to MetaMask\n  const connectMetaMask = async () => {\n    try {\n      setConnectionStatus(\"connecting\");\n      if (!isMetaMaskInstalled()) {\n        throw new Error(\"MetaMask is not installed. Please install MetaMask to continue.\");\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = accounts[0];\n      if (!account) {\n        throw new Error(\"No accounts found\");\n      }\n\n      // Create provider and signer\n      const ethProvider = new ethers.BrowserProvider(window.ethereum);\n      const ethSigner = await ethProvider.getSigner();\n\n      // Get chain ID\n      const network = await ethProvider.getNetwork();\n      const currentChainId = network.chainId.toString();\n\n      // Get balance\n      const balanceWei = await ethProvider.getBalance(account);\n      const balanceEth = ethers.formatEther(balanceWei);\n      setWalletAddress(account);\n      setIsConnected(true);\n      setProvider(ethProvider);\n      setSigner(ethSigner);\n      setChainId(currentChainId);\n      setBalance(balanceEth);\n      setConnectionStatus(\"connected\");\n      console.log(\"✅ MetaMask connected:\", {\n        address: account,\n        chainId: currentChainId,\n        balance: balanceEth\n      });\n      return {\n        address: account,\n        signer: ethSigner\n      };\n    } catch (error) {\n      console.error(\"❌ MetaMask connection error:\", error);\n      setConnectionStatus(\"error\");\n      throw error;\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setWalletAddress(\"\");\n    setIsConnected(false);\n    setBalance(null);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n    setConnectionStatus(\"disconnected\");\n    console.log(\"🔌 Wallet disconnected\");\n  };\n\n  // Get wallet balance\n  const getWalletBalance = async (address, chainId) => {\n    try {\n      if (!provider || !address) return \"0.0000\";\n      const balanceWei = await provider.getBalance(address);\n      const balanceEth = ethers.formatEther(balanceWei);\n      return parseFloat(balanceEth).toFixed(4);\n    } catch (error) {\n      console.error(\"❌ Error fetching balance:\", error);\n      return \"0.0000\";\n    }\n  };\n\n  // Switch network\n  const switchNetwork = async targetChainId => {\n    try {\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed\");\n      }\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: `0x${parseInt(targetChainId).toString(16)}`\n        }]\n      });\n\n      // Refresh connection after network switch\n      const accounts = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (accounts.length > 0) {\n        await connectMetaMask();\n      }\n    } catch (error) {\n      console.error(\"❌ Network switch error:\", error);\n      throw error;\n    }\n  };\n\n  // Listen for account changes\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && window.ethereum) {\n      const handleAccountsChanged = accounts => {\n        if (accounts.length === 0) {\n          // User disconnected\n          disconnectWallet();\n        } else if (accounts[0] !== walletAddress) {\n          // Account changed\n          setWalletAddress(accounts[0]);\n          if (provider) {\n            getWalletBalance(accounts[0], chainId).then(setBalance);\n          }\n        }\n      };\n      const handleChainChanged = chainId => {\n        // Reload the page when chain changes\n        window.location.reload();\n      };\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n      return () => {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n        window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n      };\n    }\n  }, [walletAddress, provider, chainId]);\n\n  // Auto-connect if previously connected\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (typeof window !== \"undefined\" && window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n          });\n          if (accounts.length > 0) {\n            await connectMetaMask();\n          }\n        } catch (error) {\n          console.log(\"No previous connection found\");\n        }\n      }\n    };\n    checkConnection();\n  }, []);\n  const value = {\n    walletAddress,\n    isConnected,\n    balance,\n    provider,\n    signer,\n    chainId,\n    connectionStatus,\n    connectMetaMask,\n    disconnectWallet,\n    getWalletBalance,\n    switchNetwork,\n    isMetaMaskInstalled\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s2(WalletProvider, \"kwIqz4toEZXXuOUyW0Rl1iUbBIo=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ethers","jsxDEV","_jsxDEV","WalletContext","useWallet","_s","context","Error","WalletProvider","children","_s2","walletAddress","setWalletAddress","isConnected","setIsConnected","balance","setBalance","provider","setProvider","signer","setSigner","chainId","setChainId","connectionStatus","setConnectionStatus","isMetaMaskInstalled","window","ethereum","isMetaMask","connectMetaMask","accounts","request","method","account","ethProvider","BrowserProvider","ethSigner","getSigner","network","getNetwork","currentChainId","toString","balanceWei","getBalance","balanceEth","formatEther","console","log","address","error","disconnectWallet","getWalletBalance","parseFloat","toFixed","switchNetwork","targetChainId","params","parseInt","length","handleAccountsChanged","then","handleChainChanged","location","reload","on","removeListener","checkConnection","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/omribakish/Desktop/CryptoGraphQL/client/src/contexts/WalletContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst WalletContext = createContext();\n\nexport const useWallet = () => {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletProvider\");\n  }\n  return context;\n};\n\nexport const WalletProvider = ({ children }) => {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n  const [balance, setBalance] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n\n  // Check if MetaMask is installed\n  const isMetaMaskInstalled = () => {\n    return (\n      typeof window !== \"undefined\" &&\n      window.ethereum &&\n      window.ethereum.isMetaMask\n    );\n  };\n\n  // Connect to MetaMask\n  const connectMetaMask = async () => {\n    try {\n      setConnectionStatus(\"connecting\");\n\n      if (!isMetaMaskInstalled()) {\n        throw new Error(\n          \"MetaMask is not installed. Please install MetaMask to continue.\"\n        );\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const account = accounts[0];\n\n      if (!account) {\n        throw new Error(\"No accounts found\");\n      }\n\n      // Create provider and signer\n      const ethProvider = new ethers.BrowserProvider(window.ethereum);\n      const ethSigner = await ethProvider.getSigner();\n\n      // Get chain ID\n      const network = await ethProvider.getNetwork();\n      const currentChainId = network.chainId.toString();\n\n      // Get balance\n      const balanceWei = await ethProvider.getBalance(account);\n      const balanceEth = ethers.formatEther(balanceWei);\n\n      setWalletAddress(account);\n      setIsConnected(true);\n      setProvider(ethProvider);\n      setSigner(ethSigner);\n      setChainId(currentChainId);\n      setBalance(balanceEth);\n      setConnectionStatus(\"connected\");\n\n      console.log(\"✅ MetaMask connected:\", {\n        address: account,\n        chainId: currentChainId,\n        balance: balanceEth,\n      });\n\n      return { address: account, signer: ethSigner };\n    } catch (error) {\n      console.error(\"❌ MetaMask connection error:\", error);\n      setConnectionStatus(\"error\");\n      throw error;\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setWalletAddress(\"\");\n    setIsConnected(false);\n    setBalance(null);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n    setConnectionStatus(\"disconnected\");\n    console.log(\"🔌 Wallet disconnected\");\n  };\n\n  // Get wallet balance\n  const getWalletBalance = async (address, chainId) => {\n    try {\n      if (!provider || !address) return \"0.0000\";\n\n      const balanceWei = await provider.getBalance(address);\n      const balanceEth = ethers.formatEther(balanceWei);\n      return parseFloat(balanceEth).toFixed(4);\n    } catch (error) {\n      console.error(\"❌ Error fetching balance:\", error);\n      return \"0.0000\";\n    }\n  };\n\n  // Switch network\n  const switchNetwork = async (targetChainId) => {\n    try {\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed\");\n      }\n\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: `0x${parseInt(targetChainId).toString(16)}` }],\n      });\n\n      // Refresh connection after network switch\n      const accounts = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (accounts.length > 0) {\n        await connectMetaMask();\n      }\n    } catch (error) {\n      console.error(\"❌ Network switch error:\", error);\n      throw error;\n    }\n  };\n\n  // Listen for account changes\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && window.ethereum) {\n      const handleAccountsChanged = (accounts) => {\n        if (accounts.length === 0) {\n          // User disconnected\n          disconnectWallet();\n        } else if (accounts[0] !== walletAddress) {\n          // Account changed\n          setWalletAddress(accounts[0]);\n          if (provider) {\n            getWalletBalance(accounts[0], chainId).then(setBalance);\n          }\n        }\n      };\n\n      const handleChainChanged = (chainId) => {\n        // Reload the page when chain changes\n        window.location.reload();\n      };\n\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n\n      return () => {\n        window.ethereum.removeListener(\n          \"accountsChanged\",\n          handleAccountsChanged\n        );\n        window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n      };\n    }\n  }, [walletAddress, provider, chainId]);\n\n  // Auto-connect if previously connected\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (typeof window !== \"undefined\" && window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\",\n          });\n          if (accounts.length > 0) {\n            await connectMetaMask();\n          }\n        } catch (error) {\n          console.log(\"No previous connection found\");\n        }\n      }\n    };\n\n    checkConnection();\n  }, []);\n\n  const value = {\n    walletAddress,\n    isConnected,\n    balance,\n    provider,\n    signer,\n    chainId,\n    connectionStatus,\n    connectMetaMask,\n    disconnectWallet,\n    getWalletBalance,\n    switchNetwork,\n    isMetaMaskInstalled,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>{children}</WalletContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}