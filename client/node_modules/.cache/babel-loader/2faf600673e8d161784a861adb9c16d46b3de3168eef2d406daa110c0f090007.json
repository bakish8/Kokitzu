{"ast":null,"code":"var _jsxFileName = \"/Users/omribakish/Desktop/CryptoGraphQL/client/src/components/BetConfirmationModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useMutation } from \"@apollo/client\";\nimport { RECORD_BLOCKCHAIN_BET } from \"../graphql/queries\";\n\n// Contract configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x15D1DE52d9B2F80A2f0b1b8d17885Eff3A9ac05C\";\nconst CONTRACT_ABI = [\"function createOption(string memory asset, uint256 amount, uint256 expiryTime, bool isCall) external payable\", \"function getCurrentPrice(string memory asset) external view returns (uint256)\", \"function assetConfigs(string) external view returns (address priceFeed, uint256 minAmount, uint256 maxAmount, uint256 feePercentage, bool isActive)\", \"event OptionCreated(uint256 indexed optionId, address indexed trader, string asset, uint256 amount, uint256 strikePrice, uint256 expiryTime, bool isCall)\"];\n\n// Timeframe mappings\nconst TIMEFRAME_SECONDS = {\n  ONE_MINUTE: 60,\n  FIVE_MINUTES: 300,\n  FIFTEEN_MINUTES: 900,\n  THIRTY_MINUTES: 1800,\n  ONE_HOUR: 3600,\n  FOUR_HOURS: 14400,\n  ONE_DAY: 86400\n};\nfunction BetConfirmationModal({\n  showBetModal,\n  setShowBetModal,\n  selectedCrypto,\n  betType,\n  betAmount,\n  getSelectedTimeframeInfo,\n  handlePlaceBet\n}) {\n  _s();\n  var _getSelectedTimeframe, _getSelectedTimeframe2;\n  const [bettingMode, setBettingMode] = useState(\"blockchain\"); // Default to blockchain\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [walletBalance, setWalletBalance] = useState(\"0\");\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isPlacingBet, setIsPlacingBet] = useState(false);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n\n  // GraphQL mutation to record blockchain bet in database\n  const [recordBlockchainBet] = useMutation(RECORD_BLOCKCHAIN_BET, {\n    onError: error => {\n      console.error(\"Failed to record blockchain bet in database:\", error);\n    }\n  });\n\n  // Connect to MetaMask\n  const connectWallet = async () => {\n    if (!window.ethereum) {\n      alert(\"MetaMask is not installed! Please install MetaMask.\");\n      return;\n    }\n    try {\n      setIsConnecting(true);\n\n      // Request account access\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // Create provider and signer\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      setProvider(provider);\n      setSigner(signer);\n      setWalletAddress(address);\n\n      // Get balance\n      const balance = await provider.getBalance(address);\n      setWalletBalance(ethers.formatEther(balance));\n\n      // Check network\n      const network = await provider.getNetwork();\n      if (network.chainId !== 11155111n) {\n        // Sepolia chain ID\n        alert(\"Please switch to Sepolia testnet in MetaMask\");\n        return;\n      }\n      console.log(\"✅ Wallet connected:\", address);\n      console.log(\"💰 Balance:\", ethers.formatEther(balance), \"ETH\");\n    } catch (error) {\n      console.error(\"Failed to connect wallet:\", error);\n      alert(\"Failed to connect wallet: \" + error.message);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Place blockchain bet directly from user's wallet\n  const placeBlockchainBet = async () => {\n    if (!signer) {\n      alert(\"Please connect your wallet first\");\n      return;\n    }\n    try {\n      setIsPlacingBet(true);\n\n      // Convert bet amount from USD to ETH (simplified - in production you'd use a price oracle)\n      const ethAmount = (betAmount / 3000).toString(); // Assuming ETH ≈ $3000\n      const amountWei = ethers.parseEther(ethAmount);\n\n      // Get timeframe info\n      const timeframeInfo = getSelectedTimeframeInfo();\n      const timeframeKey = Object.keys(TIMEFRAME_SECONDS).find(key => timeframeInfo.label.includes(key.replace(\"_\", \" \").toLowerCase())) || \"ONE_MINUTE\";\n      const expirySeconds = TIMEFRAME_SECONDS[timeframeKey];\n\n      // Create contract instance\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n\n      // Map crypto symbol to contract asset\n      const assetMap = {\n        BTC: \"BTC\",\n        ETH: \"ETH\",\n        LINK: \"LINK\",\n        MATIC: \"MATIC\"\n      };\n      const asset = assetMap[selectedCrypto] || selectedCrypto;\n      const isCall = betType === \"UP\";\n      console.log(\"🔗 Placing bet directly from YOUR wallet:\", {\n        walletAddress: walletAddress,\n        asset,\n        amount: ethAmount + \" ETH\",\n        expiry: expirySeconds + \" seconds\",\n        isCall: isCall,\n        contractAddress: CONTRACT_ADDRESS\n      });\n      console.log(\"💰 YOUR WALLET WILL BE CHARGED:\", ethAmount, \"ETH\");\n      console.log(\"🎯 CONTRACT WILL RECOGNIZE YOU AS TRADER:\", walletAddress);\n\n      // Send transaction FROM YOUR WALLET\n      const tx = await contract.createOption(asset, amountWei, expirySeconds, isCall, {\n        value: amountWei,\n        gasLimit: 500000,\n        maxFeePerGas: ethers.parseUnits(\"2\", \"gwei\"),\n        // Low gas for Sepolia testnet\n        maxPriorityFeePerGas: ethers.parseUnits(\"1\", \"gwei\")\n      });\n      console.log(\"⏳ Transaction sent:\", tx.hash);\n\n      // Wait for confirmation\n      const receipt = await tx.wait();\n      console.log(\"✅ Transaction confirmed:\", receipt.hash);\n\n      // Update balance\n      const newBalance = await provider.getBalance(walletAddress);\n      setWalletBalance(ethers.formatEther(newBalance));\n\n      // Parse events to get option ID\n      const optionCreatedEvent = receipt.logs.find(log => {\n        try {\n          const parsed = contract.interface.parseLog(log);\n          return parsed.name === \"OptionCreated\";\n        } catch {\n          return false;\n        }\n      });\n      let optionId = null;\n      let entryPrice = 0;\n      if (optionCreatedEvent) {\n        const parsed = contract.interface.parseLog(optionCreatedEvent);\n        optionId = parsed.args.optionId.toString();\n        entryPrice = Number(parsed.args.strikePrice) / 1e8; // Convert from price feed format to USD\n        console.log(\"🎲 Option created with ID:\", optionId);\n        console.log(\"💰 Entry price:\", entryPrice);\n      }\n\n      // Record the bet in database\n      try {\n        console.log(\"📝 Recording bet in database...\");\n        await recordBlockchainBet({\n          variables: {\n            input: {\n              cryptoSymbol: selectedCrypto,\n              betType: betType,\n              amount: parseFloat(ethAmount),\n              timeframe: timeframeKey,\n              walletAddress: walletAddress,\n              optionId: optionId,\n              transactionHash: tx.hash,\n              blockNumber: receipt.blockNumber,\n              entryPrice: entryPrice\n            }\n          }\n        });\n        console.log(\"✅ Bet recorded in database\");\n      } catch (dbError) {\n        console.error(\"❌ Failed to record bet in database:\", dbError);\n        // Don't fail the whole transaction, just warn user\n        alert(\"Bet placed on blockchain successfully, but failed to record in database. The bet will still be executed properly.\");\n      }\n\n      // Close modal\n      setShowBetModal(false);\n      alert(`Bet placed successfully! Transaction: ${tx.hash}\\nOption ID: ${optionId}`);\n    } catch (error) {\n      console.error(\"Failed to place bet:\", error);\n      let errorMessage = \"Failed to place bet: \";\n      if (error.code === 4001) {\n        errorMessage = \"Transaction cancelled by user.\";\n      } else if (error.code === -32603) {\n        errorMessage = \"Internal error. Please check your wallet balance and network.\";\n      } else if (error.message.includes(\"insufficient funds\")) {\n        errorMessage = \"Insufficient funds in your wallet.\";\n      } else if (error.message.includes(\"gas\")) {\n        errorMessage = \"Gas estimation failed. Please check your wallet balance.\";\n      } else if (error.message.includes(\"network\")) {\n        errorMessage = \"Network error. Please check your connection and try again.\";\n      } else if (error.message.includes(\"user rejected\")) {\n        errorMessage = \"Transaction was rejected in MetaMask.\";\n      } else {\n        errorMessage = \"Failed to place bet: \" + (error.message || \"Unknown error\");\n      }\n      alert(errorMessage);\n    } finally {\n      setIsPlacingBet(false);\n    }\n  };\n\n  // Handle bet confirmation\n  const handleConfirmBet = () => {\n    if (bettingMode === \"blockchain\") {\n      if (!walletAddress) {\n        alert(\"Please connect your wallet first!\");\n        return;\n      }\n      console.log(\"🔗 Placing BLOCKCHAIN bet directly from YOUR wallet:\", walletAddress);\n      console.log(\"💰 Your wallet will be debited and credited directly!\");\n      placeBlockchainBet();\n    } else {\n      console.log(\"💾 Placing LEGACY bet via server\");\n      handlePlaceBet(false, null);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setWalletAddress(\"\");\n    setWalletBalance(\"0\");\n    setProvider(null);\n    setSigner(null);\n  };\n\n  // Listen for account changes\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else {\n          connectWallet();\n        }\n      });\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners(\"accountsChanged\");\n        window.ethereum.removeAllListeners(\"chainChanged\");\n      }\n    };\n  }, []);\n  if (!showBetModal) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    onClick: () => setShowBetModal(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Confirm Your Bet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bet-confirmation\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Cryptocurrency:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: selectedCrypto\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Direction:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `direction ${betType.toLowerCase()}`,\n            children: betType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Timeframe:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_getSelectedTimeframe = getSelectedTimeframeInfo()) === null || _getSelectedTimeframe === void 0 ? void 0 : _getSelectedTimeframe.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"$\", betAmount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Potential Payout:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"$\", (betAmount * parseFloat((_getSelectedTimeframe2 = getSelectedTimeframeInfo()) === null || _getSelectedTimeframe2 === void 0 ? void 0 : _getSelectedTimeframe2.payout.replace(\"x\", \"\"))).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Betting Mode:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"betting-mode-selection\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: `mode-option ${bettingMode === \"legacy\" ? \"active\" : \"\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"legacy\",\n                checked: bettingMode === \"legacy\",\n                onChange: e => setBettingMode(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 17\n              }, this), \"\\uD83D\\uDCBE Legacy (In-Memory)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: `mode-option ${bettingMode === \"blockchain\" ? \"active\" : \"\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"blockchain\",\n                checked: bettingMode === \"blockchain\",\n                onChange: e => setBettingMode(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 17\n              }, this), \"\\uD83D\\uDD17 Blockchain (Real ETH)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), bettingMode === \"blockchain\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Wallet:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wallet-section\",\n            children: !walletAddress ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: connectWallet,\n              disabled: isConnecting,\n              className: \"connect-wallet-btn\",\n              children: isConnecting ? \"Connecting...\" : \"🦊 Connect MetaMask\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wallet-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"wallet-address\",\n                children: [walletAddress.slice(0, 6), \"...\", walletAddress.slice(-4)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"wallet-balance\",\n                children: [\"Balance: \", parseFloat(walletBalance).toFixed(4), \" ETH\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: disconnectWallet,\n                className: \"disconnect-btn\",\n                children: \"Disconnect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            style: {\n              color: \"#666\",\n              fontSize: \"10px\"\n            },\n            children: \"\\u26A0\\uFE0F Make sure you have Sepolia ETH for gas fees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-btn\",\n          onClick: () => setShowBetModal(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-btn\",\n          onClick: handleConfirmBet,\n          disabled: isPlacingBet || bettingMode === \"blockchain\" && !walletAddress,\n          children: isPlacingBet ? \"Placing Bet...\" : bettingMode === \"blockchain\" ? \"🔗 Place Real ETH Bet\" : \"💾 Place Demo Bet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n}\n_s(BetConfirmationModal, \"WNjX2rT0CC7NIyYrpiAoINP8U2E=\", false, function () {\n  return [useMutation];\n});\n_c = BetConfirmationModal;\nexport default BetConfirmationModal;\nvar _c;\n$RefreshReg$(_c, \"BetConfirmationModal\");","map":{"version":3,"names":["React","useState","useEffect","ethers","useMutation","RECORD_BLOCKCHAIN_BET","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","CONTRACT_ABI","TIMEFRAME_SECONDS","ONE_MINUTE","FIVE_MINUTES","FIFTEEN_MINUTES","THIRTY_MINUTES","ONE_HOUR","FOUR_HOURS","ONE_DAY","BetConfirmationModal","showBetModal","setShowBetModal","selectedCrypto","betType","betAmount","getSelectedTimeframeInfo","handlePlaceBet","_s","_getSelectedTimeframe","_getSelectedTimeframe2","bettingMode","setBettingMode","walletAddress","setWalletAddress","walletBalance","setWalletBalance","isConnecting","setIsConnecting","isPlacingBet","setIsPlacingBet","provider","setProvider","signer","setSigner","recordBlockchainBet","onError","error","console","connectWallet","window","ethereum","alert","request","method","BrowserProvider","getSigner","address","getAddress","balance","getBalance","formatEther","network","getNetwork","chainId","log","message","placeBlockchainBet","ethAmount","toString","amountWei","parseEther","timeframeInfo","timeframeKey","Object","keys","find","key","label","includes","replace","toLowerCase","expirySeconds","contract","Contract","assetMap","BTC","ETH","LINK","MATIC","asset","isCall","amount","expiry","contractAddress","tx","createOption","value","gasLimit","maxFeePerGas","parseUnits","maxPriorityFeePerGas","hash","receipt","wait","newBalance","optionCreatedEvent","logs","parsed","interface","parseLog","name","optionId","entryPrice","args","Number","strikePrice","variables","input","cryptoSymbol","parseFloat","timeframe","transactionHash","blockNumber","dbError","errorMessage","code","handleConfirmBet","disconnectWallet","on","accounts","length","location","reload","removeAllListeners","className","onClick","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","payout","toFixed","type","checked","onChange","target","disabled","slice","style","color","fontSize","_c","$RefreshReg$"],"sources":["/Users/omribakish/Desktop/CryptoGraphQL/client/src/components/BetConfirmationModal.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useMutation } from \"@apollo/client\";\nimport { RECORD_BLOCKCHAIN_BET } from \"../graphql/queries\";\n\n// Contract configuration\nconst CONTRACT_ADDRESS = \"0x15D1DE52d9B2F80A2f0b1b8d17885Eff3A9ac05C\";\nconst CONTRACT_ABI = [\n  \"function createOption(string memory asset, uint256 amount, uint256 expiryTime, bool isCall) external payable\",\n  \"function getCurrentPrice(string memory asset) external view returns (uint256)\",\n  \"function assetConfigs(string) external view returns (address priceFeed, uint256 minAmount, uint256 maxAmount, uint256 feePercentage, bool isActive)\",\n  \"event OptionCreated(uint256 indexed optionId, address indexed trader, string asset, uint256 amount, uint256 strikePrice, uint256 expiryTime, bool isCall)\",\n];\n\n// Timeframe mappings\nconst TIMEFRAME_SECONDS = {\n  ONE_MINUTE: 60,\n  FIVE_MINUTES: 300,\n  FIFTEEN_MINUTES: 900,\n  THIRTY_MINUTES: 1800,\n  ONE_HOUR: 3600,\n  FOUR_HOURS: 14400,\n  ONE_DAY: 86400,\n};\n\nfunction BetConfirmationModal({\n  showBetModal,\n  setShowBetModal,\n  selectedCrypto,\n  betType,\n  betAmount,\n  getSelectedTimeframeInfo,\n  handlePlaceBet,\n}) {\n  const [bettingMode, setBettingMode] = useState(\"blockchain\"); // Default to blockchain\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [walletBalance, setWalletBalance] = useState(\"0\");\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isPlacingBet, setIsPlacingBet] = useState(false);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n\n  // GraphQL mutation to record blockchain bet in database\n  const [recordBlockchainBet] = useMutation(RECORD_BLOCKCHAIN_BET, {\n    onError: (error) => {\n      console.error(\"Failed to record blockchain bet in database:\", error);\n    },\n  });\n\n  // Connect to MetaMask\n  const connectWallet = async () => {\n    if (!window.ethereum) {\n      alert(\"MetaMask is not installed! Please install MetaMask.\");\n      return;\n    }\n\n    try {\n      setIsConnecting(true);\n\n      // Request account access\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n      // Create provider and signer\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n\n      setProvider(provider);\n      setSigner(signer);\n      setWalletAddress(address);\n\n      // Get balance\n      const balance = await provider.getBalance(address);\n      setWalletBalance(ethers.formatEther(balance));\n\n      // Check network\n      const network = await provider.getNetwork();\n      if (network.chainId !== 11155111n) {\n        // Sepolia chain ID\n        alert(\"Please switch to Sepolia testnet in MetaMask\");\n        return;\n      }\n\n      console.log(\"✅ Wallet connected:\", address);\n      console.log(\"💰 Balance:\", ethers.formatEther(balance), \"ETH\");\n    } catch (error) {\n      console.error(\"Failed to connect wallet:\", error);\n      alert(\"Failed to connect wallet: \" + error.message);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Place blockchain bet directly from user's wallet\n  const placeBlockchainBet = async () => {\n    if (!signer) {\n      alert(\"Please connect your wallet first\");\n      return;\n    }\n\n    try {\n      setIsPlacingBet(true);\n\n      // Convert bet amount from USD to ETH (simplified - in production you'd use a price oracle)\n      const ethAmount = (betAmount / 3000).toString(); // Assuming ETH ≈ $3000\n      const amountWei = ethers.parseEther(ethAmount);\n\n      // Get timeframe info\n      const timeframeInfo = getSelectedTimeframeInfo();\n      const timeframeKey =\n        Object.keys(TIMEFRAME_SECONDS).find((key) =>\n          timeframeInfo.label.includes(key.replace(\"_\", \" \").toLowerCase())\n        ) || \"ONE_MINUTE\";\n      const expirySeconds = TIMEFRAME_SECONDS[timeframeKey];\n\n      // Create contract instance\n      const contract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        CONTRACT_ABI,\n        signer\n      );\n\n      // Map crypto symbol to contract asset\n      const assetMap = {\n        BTC: \"BTC\",\n        ETH: \"ETH\",\n        LINK: \"LINK\",\n        MATIC: \"MATIC\",\n      };\n      const asset = assetMap[selectedCrypto] || selectedCrypto;\n      const isCall = betType === \"UP\";\n\n      console.log(\"🔗 Placing bet directly from YOUR wallet:\", {\n        walletAddress: walletAddress,\n        asset,\n        amount: ethAmount + \" ETH\",\n        expiry: expirySeconds + \" seconds\",\n        isCall: isCall,\n        contractAddress: CONTRACT_ADDRESS,\n      });\n      console.log(\"💰 YOUR WALLET WILL BE CHARGED:\", ethAmount, \"ETH\");\n      console.log(\"🎯 CONTRACT WILL RECOGNIZE YOU AS TRADER:\", walletAddress);\n\n      // Send transaction FROM YOUR WALLET\n      const tx = await contract.createOption(\n        asset,\n        amountWei,\n        expirySeconds,\n        isCall,\n        {\n          value: amountWei,\n          gasLimit: 500000,\n          maxFeePerGas: ethers.parseUnits(\"2\", \"gwei\"), // Low gas for Sepolia testnet\n          maxPriorityFeePerGas: ethers.parseUnits(\"1\", \"gwei\"),\n        }\n      );\n\n      console.log(\"⏳ Transaction sent:\", tx.hash);\n\n      // Wait for confirmation\n      const receipt = await tx.wait();\n      console.log(\"✅ Transaction confirmed:\", receipt.hash);\n\n      // Update balance\n      const newBalance = await provider.getBalance(walletAddress);\n      setWalletBalance(ethers.formatEther(newBalance));\n\n      // Parse events to get option ID\n      const optionCreatedEvent = receipt.logs.find((log) => {\n        try {\n          const parsed = contract.interface.parseLog(log);\n          return parsed.name === \"OptionCreated\";\n        } catch {\n          return false;\n        }\n      });\n\n      let optionId = null;\n      let entryPrice = 0;\n      if (optionCreatedEvent) {\n        const parsed = contract.interface.parseLog(optionCreatedEvent);\n        optionId = parsed.args.optionId.toString();\n        entryPrice = Number(parsed.args.strikePrice) / 1e8; // Convert from price feed format to USD\n        console.log(\"🎲 Option created with ID:\", optionId);\n        console.log(\"💰 Entry price:\", entryPrice);\n      }\n\n      // Record the bet in database\n      try {\n        console.log(\"📝 Recording bet in database...\");\n        await recordBlockchainBet({\n          variables: {\n            input: {\n              cryptoSymbol: selectedCrypto,\n              betType: betType,\n              amount: parseFloat(ethAmount),\n              timeframe: timeframeKey,\n              walletAddress: walletAddress,\n              optionId: optionId,\n              transactionHash: tx.hash,\n              blockNumber: receipt.blockNumber,\n              entryPrice: entryPrice,\n            },\n          },\n        });\n        console.log(\"✅ Bet recorded in database\");\n      } catch (dbError) {\n        console.error(\"❌ Failed to record bet in database:\", dbError);\n        // Don't fail the whole transaction, just warn user\n        alert(\n          \"Bet placed on blockchain successfully, but failed to record in database. The bet will still be executed properly.\"\n        );\n      }\n\n      // Close modal\n      setShowBetModal(false);\n\n      alert(\n        `Bet placed successfully! Transaction: ${tx.hash}\\nOption ID: ${optionId}`\n      );\n    } catch (error) {\n      console.error(\"Failed to place bet:\", error);\n\n      let errorMessage = \"Failed to place bet: \";\n\n      if (error.code === 4001) {\n        errorMessage = \"Transaction cancelled by user.\";\n      } else if (error.code === -32603) {\n        errorMessage =\n          \"Internal error. Please check your wallet balance and network.\";\n      } else if (error.message.includes(\"insufficient funds\")) {\n        errorMessage = \"Insufficient funds in your wallet.\";\n      } else if (error.message.includes(\"gas\")) {\n        errorMessage =\n          \"Gas estimation failed. Please check your wallet balance.\";\n      } else if (error.message.includes(\"network\")) {\n        errorMessage =\n          \"Network error. Please check your connection and try again.\";\n      } else if (error.message.includes(\"user rejected\")) {\n        errorMessage = \"Transaction was rejected in MetaMask.\";\n      } else {\n        errorMessage =\n          \"Failed to place bet: \" + (error.message || \"Unknown error\");\n      }\n\n      alert(errorMessage);\n    } finally {\n      setIsPlacingBet(false);\n    }\n  };\n\n  // Handle bet confirmation\n  const handleConfirmBet = () => {\n    if (bettingMode === \"blockchain\") {\n      if (!walletAddress) {\n        alert(\"Please connect your wallet first!\");\n        return;\n      }\n      console.log(\n        \"🔗 Placing BLOCKCHAIN bet directly from YOUR wallet:\",\n        walletAddress\n      );\n      console.log(\"💰 Your wallet will be debited and credited directly!\");\n      placeBlockchainBet();\n    } else {\n      console.log(\"💾 Placing LEGACY bet via server\");\n      handlePlaceBet(false, null);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setWalletAddress(\"\");\n    setWalletBalance(\"0\");\n    setProvider(null);\n    setSigner(null);\n  };\n\n  // Listen for account changes\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else {\n          connectWallet();\n        }\n      });\n\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners(\"accountsChanged\");\n        window.ethereum.removeAllListeners(\"chainChanged\");\n      }\n    };\n  }, []);\n\n  if (!showBetModal) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={() => setShowBetModal(false)}>\n      <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n        <h3>Confirm Your Bet</h3>\n        <div className=\"bet-confirmation\">\n          <div className=\"confirmation-item\">\n            <span>Cryptocurrency:</span>\n            <span>{selectedCrypto}</span>\n          </div>\n          <div className=\"confirmation-item\">\n            <span>Direction:</span>\n            <span className={`direction ${betType.toLowerCase()}`}>\n              {betType}\n            </span>\n          </div>\n          <div className=\"confirmation-item\">\n            <span>Timeframe:</span>\n            <span>{getSelectedTimeframeInfo()?.label}</span>\n          </div>\n          <div className=\"confirmation-item\">\n            <span>Amount:</span>\n            <span>${betAmount}</span>\n          </div>\n          <div className=\"confirmation-item\">\n            <span>Potential Payout:</span>\n            <span>\n              $\n              {(\n                betAmount *\n                parseFloat(getSelectedTimeframeInfo()?.payout.replace(\"x\", \"\"))\n              ).toFixed(2)}\n            </span>\n          </div>\n\n          {/* Betting Mode Selection */}\n          <div className=\"confirmation-item\">\n            <span>Betting Mode:</span>\n            <div className=\"betting-mode-selection\">\n              <label\n                className={`mode-option ${\n                  bettingMode === \"legacy\" ? \"active\" : \"\"\n                }`}\n              >\n                <input\n                  type=\"radio\"\n                  value=\"legacy\"\n                  checked={bettingMode === \"legacy\"}\n                  onChange={(e) => setBettingMode(e.target.value)}\n                />\n                💾 Legacy (In-Memory)\n              </label>\n              <label\n                className={`mode-option ${\n                  bettingMode === \"blockchain\" ? \"active\" : \"\"\n                }`}\n              >\n                <input\n                  type=\"radio\"\n                  value=\"blockchain\"\n                  checked={bettingMode === \"blockchain\"}\n                  onChange={(e) => setBettingMode(e.target.value)}\n                />\n                🔗 Blockchain (Real ETH)\n              </label>\n            </div>\n          </div>\n\n          {/* Wallet Connection (only show for blockchain mode) */}\n          {bettingMode === \"blockchain\" && (\n            <div className=\"confirmation-item\">\n              <span>Wallet:</span>\n              <div className=\"wallet-section\">\n                {!walletAddress ? (\n                  <button\n                    onClick={connectWallet}\n                    disabled={isConnecting}\n                    className=\"connect-wallet-btn\"\n                  >\n                    {isConnecting ? \"Connecting...\" : \"🦊 Connect MetaMask\"}\n                  </button>\n                ) : (\n                  <div className=\"wallet-info\">\n                    <div className=\"wallet-address\">\n                      {walletAddress.slice(0, 6)}...{walletAddress.slice(-4)}\n                    </div>\n                    <div className=\"wallet-balance\">\n                      Balance: {parseFloat(walletBalance).toFixed(4)} ETH\n                    </div>\n                    <button\n                      onClick={disconnectWallet}\n                      className=\"disconnect-btn\"\n                    >\n                      Disconnect\n                    </button>\n                  </div>\n                )}\n              </div>\n              <small style={{ color: \"#666\", fontSize: \"10px\" }}>\n                ⚠️ Make sure you have Sepolia ETH for gas fees\n              </small>\n            </div>\n          )}\n        </div>\n\n        <div className=\"modal-actions\">\n          <button className=\"cancel-btn\" onClick={() => setShowBetModal(false)}>\n            Cancel\n          </button>\n          <button\n            className=\"confirm-btn\"\n            onClick={handleConfirmBet}\n            disabled={\n              isPlacingBet || (bettingMode === \"blockchain\" && !walletAddress)\n            }\n          >\n            {isPlacingBet\n              ? \"Placing Bet...\"\n              : bettingMode === \"blockchain\"\n              ? \"🔗 Place Real ETH Bet\"\n              : \"💾 Place Demo Bet\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BetConfirmationModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}