{"ast":null,"code":"class PriceDataService {\n  constructor() {\n    this.cache = new Map();\n    this.CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n    // Timeframe configurations\n    this.TIMEFRAME_CONFIGS = {\n      \"1m\": {\n        days: 1 / 24,\n        interval: \"minute\",\n        dataPoints: 60,\n        label: \"Last Hour (1m intervals)\"\n      },\n      \"5m\": {\n        days: 1 / 4,\n        interval: \"5min\",\n        dataPoints: 12,\n        label: \"Last Hour (5m intervals)\"\n      },\n      \"15m\": {\n        days: 1 / 4,\n        interval: \"15min\",\n        dataPoints: 4,\n        label: \"Last Hour (15m intervals)\"\n      },\n      \"30m\": {\n        days: 1 / 2,\n        interval: \"30min\",\n        dataPoints: 2,\n        label: \"Last Hour (30m intervals)\"\n      },\n      \"1h\": {\n        days: 1,\n        interval: \"hour\",\n        dataPoints: 24,\n        label: \"Last 24 Hours (1h intervals)\"\n      },\n      \"4h\": {\n        days: 4,\n        interval: \"4hour\",\n        dataPoints: 6,\n        label: \"Last 24 Hours (4h intervals)\"\n      },\n      \"1d\": {\n        days: 7,\n        interval: \"day\",\n        dataPoints: 7,\n        label: \"Last 7 Days (1d intervals)\"\n      },\n      \"1w\": {\n        days: 30,\n        interval: \"week\",\n        dataPoints: 4,\n        label: \"Last 30 Days (1w intervals)\"\n      }\n    };\n    this.coinMap = {\n      BTC: \"bitcoin\",\n      ETH: \"ethereum\",\n      SOL: \"solana\",\n      ADA: \"cardano\",\n      DOT: \"polkadot\",\n      LINK: \"chainlink\",\n      UNI: \"uniswap\",\n      MATIC: \"matic-network\",\n      AVAX: \"avalanche-2\",\n      ATOM: \"cosmos\"\n    };\n  }\n  getCoinId(symbol) {\n    return this.coinMap[symbol.toUpperCase()] || symbol.toLowerCase();\n  }\n  isCacheValid(key) {\n    const cached = this.cache.get(key);\n    if (!cached) return false;\n    return Date.now() - cached.timestamp < this.CACHE_DURATION;\n  }\n  async getPriceHistory(symbol, timeframe = \"1h\") {\n    // Map timeframe constants to service keys\n    const timeframeMap = {\n      ONE_MINUTE: \"1m\",\n      FIVE_MINUTES: \"5m\",\n      FIFTEEN_MINUTES: \"15m\",\n      THIRTY_MINUTES: \"30m\",\n      ONE_HOUR: \"1h\",\n      FOUR_HOURS: \"4h\",\n      ONE_DAY: \"1d\"\n    };\n    const serviceKey = timeframeMap[timeframe] || timeframe;\n    const config = this.TIMEFRAME_CONFIGS[serviceKey] || this.TIMEFRAME_CONFIGS[\"1h\"];\n    const cacheKey = `${symbol}-${serviceKey}`;\n\n    // Check cache first\n    if (this.isCacheValid(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      return cached.data;\n    }\n    try {\n      const coinId = this.getCoinId(symbol);\n      const response = await fetch(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=usd&days=${config.days}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Extract prices\n      const prices = data.prices.map(([timestamp, price]) => price);\n\n      // Sample data points based on timeframe configuration\n      const step = Math.max(1, Math.floor(prices.length / config.dataPoints));\n      const chartData = prices.filter((_, index) => index % step === 0).slice(0, config.dataPoints);\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: chartData,\n        timestamp: Date.now()\n      });\n      return chartData;\n    } catch (error) {\n      console.error(\"Error fetching price history:\", error);\n\n      // Return mock data if API fails\n      return this.generateMockData(symbol, timeframe);\n    }\n  }\n  getTimeframeConfig(timeframe) {\n    return this.TIMEFRAME_CONFIGS[timeframe] || this.TIMEFRAME_CONFIGS[\"1h\"];\n  }\n  getTimeframeLabel(timeframe) {\n    // Map timeframe constants to service keys\n    const timeframeMap = {\n      ONE_MINUTE: \"1m\",\n      FIVE_MINUTES: \"5m\",\n      FIFTEEN_MINUTES: \"15m\",\n      THIRTY_MINUTES: \"30m\",\n      ONE_HOUR: \"1h\",\n      FOUR_HOURS: \"4h\",\n      ONE_DAY: \"1d\"\n    };\n    const serviceKey = timeframeMap[timeframe] || timeframe;\n    const config = this.getTimeframeConfig(serviceKey);\n    console.log(\"🔍 Timeframe mapping:\", timeframe, \"->\", serviceKey, \"->\", config.label);\n    return config.label;\n  }\n  generateMockData(symbol, timeframe) {\n    // Generate realistic mock data based on current price\n    const basePrice = this.getBasePrice(symbol);\n\n    // Map timeframe constants to service keys\n    const timeframeMap = {\n      ONE_MINUTE: \"1m\",\n      FIVE_MINUTES: \"5m\",\n      FIFTEEN_MINUTES: \"15m\",\n      THIRTY_MINUTES: \"30m\",\n      ONE_HOUR: \"1h\",\n      FOUR_HOURS: \"4h\",\n      ONE_DAY: \"1d\"\n    };\n    const serviceKey = timeframeMap[timeframe] || timeframe;\n    const config = this.getTimeframeConfig(serviceKey);\n    const data = [];\n    for (let i = 0; i < config.dataPoints; i++) {\n      const variation = (Math.random() - 0.5) * 0.1; // ±5% variation\n      const price = basePrice * (1 + variation);\n      data.push(price);\n    }\n    return data;\n  }\n  getBasePrice(symbol) {\n    const basePrices = {\n      BTC: 45000,\n      ETH: 3000,\n      SOL: 100,\n      ADA: 0.5,\n      DOT: 7,\n      LINK: 15,\n      UNI: 8,\n      MATIC: 1,\n      AVAX: 25,\n      ATOM: 10\n    };\n    return basePrices[symbol.toUpperCase()] || 100;\n  }\n  clearCache() {\n    this.cache.clear();\n  }\n}\nexport const priceDataService = new PriceDataService();\nexport default priceDataService;","map":{"version":3,"names":["PriceDataService","constructor","cache","Map","CACHE_DURATION","TIMEFRAME_CONFIGS","days","interval","dataPoints","label","coinMap","BTC","ETH","SOL","ADA","DOT","LINK","UNI","MATIC","AVAX","ATOM","getCoinId","symbol","toUpperCase","toLowerCase","isCacheValid","key","cached","get","Date","now","timestamp","getPriceHistory","timeframe","timeframeMap","ONE_MINUTE","FIVE_MINUTES","FIFTEEN_MINUTES","THIRTY_MINUTES","ONE_HOUR","FOUR_HOURS","ONE_DAY","serviceKey","config","cacheKey","data","coinId","response","fetch","ok","Error","status","json","prices","map","price","step","Math","max","floor","length","chartData","filter","_","index","slice","set","error","console","generateMockData","getTimeframeConfig","getTimeframeLabel","log","basePrice","getBasePrice","i","variation","random","push","basePrices","clearCache","clear","priceDataService"],"sources":["/Users/omribakish/Desktop/CryptoGraphQL/client/src/services/priceDataService.js"],"sourcesContent":["class PriceDataService {\n  constructor() {\n    this.cache = new Map();\n    this.CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n    // Timeframe configurations\n    this.TIMEFRAME_CONFIGS = {\n      \"1m\": {\n        days: 1 / 24,\n        interval: \"minute\",\n        dataPoints: 60,\n        label: \"Last Hour (1m intervals)\",\n      },\n      \"5m\": {\n        days: 1 / 4,\n        interval: \"5min\",\n        dataPoints: 12,\n        label: \"Last Hour (5m intervals)\",\n      },\n      \"15m\": {\n        days: 1 / 4,\n        interval: \"15min\",\n        dataPoints: 4,\n        label: \"Last Hour (15m intervals)\",\n      },\n      \"30m\": {\n        days: 1 / 2,\n        interval: \"30min\",\n        dataPoints: 2,\n        label: \"Last Hour (30m intervals)\",\n      },\n      \"1h\": {\n        days: 1,\n        interval: \"hour\",\n        dataPoints: 24,\n        label: \"Last 24 Hours (1h intervals)\",\n      },\n      \"4h\": {\n        days: 4,\n        interval: \"4hour\",\n        dataPoints: 6,\n        label: \"Last 24 Hours (4h intervals)\",\n      },\n      \"1d\": {\n        days: 7,\n        interval: \"day\",\n        dataPoints: 7,\n        label: \"Last 7 Days (1d intervals)\",\n      },\n      \"1w\": {\n        days: 30,\n        interval: \"week\",\n        dataPoints: 4,\n        label: \"Last 30 Days (1w intervals)\",\n      },\n    };\n\n    this.coinMap = {\n      BTC: \"bitcoin\",\n      ETH: \"ethereum\",\n      SOL: \"solana\",\n      ADA: \"cardano\",\n      DOT: \"polkadot\",\n      LINK: \"chainlink\",\n      UNI: \"uniswap\",\n      MATIC: \"matic-network\",\n      AVAX: \"avalanche-2\",\n      ATOM: \"cosmos\",\n    };\n  }\n\n  getCoinId(symbol) {\n    return this.coinMap[symbol.toUpperCase()] || symbol.toLowerCase();\n  }\n\n  isCacheValid(key) {\n    const cached = this.cache.get(key);\n    if (!cached) return false;\n    return Date.now() - cached.timestamp < this.CACHE_DURATION;\n  }\n\n  async getPriceHistory(symbol, timeframe = \"1h\") {\n    // Map timeframe constants to service keys\n    const timeframeMap = {\n      ONE_MINUTE: \"1m\",\n      FIVE_MINUTES: \"5m\",\n      FIFTEEN_MINUTES: \"15m\",\n      THIRTY_MINUTES: \"30m\",\n      ONE_HOUR: \"1h\",\n      FOUR_HOURS: \"4h\",\n      ONE_DAY: \"1d\",\n    };\n\n    const serviceKey = timeframeMap[timeframe] || timeframe;\n    const config =\n      this.TIMEFRAME_CONFIGS[serviceKey] || this.TIMEFRAME_CONFIGS[\"1h\"];\n    const cacheKey = `${symbol}-${serviceKey}`;\n\n    // Check cache first\n    if (this.isCacheValid(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      return cached.data;\n    }\n\n    try {\n      const coinId = this.getCoinId(symbol);\n      const response = await fetch(\n        `https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=usd&days=${config.days}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      // Extract prices\n      const prices = data.prices.map(([timestamp, price]) => price);\n\n      // Sample data points based on timeframe configuration\n      const step = Math.max(1, Math.floor(prices.length / config.dataPoints));\n      const chartData = prices\n        .filter((_, index) => index % step === 0)\n        .slice(0, config.dataPoints);\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: chartData,\n        timestamp: Date.now(),\n      });\n\n      return chartData;\n    } catch (error) {\n      console.error(\"Error fetching price history:\", error);\n\n      // Return mock data if API fails\n      return this.generateMockData(symbol, timeframe);\n    }\n  }\n\n  getTimeframeConfig(timeframe) {\n    return this.TIMEFRAME_CONFIGS[timeframe] || this.TIMEFRAME_CONFIGS[\"1h\"];\n  }\n\n  getTimeframeLabel(timeframe) {\n    // Map timeframe constants to service keys\n    const timeframeMap = {\n      ONE_MINUTE: \"1m\",\n      FIVE_MINUTES: \"5m\",\n      FIFTEEN_MINUTES: \"15m\",\n      THIRTY_MINUTES: \"30m\",\n      ONE_HOUR: \"1h\",\n      FOUR_HOURS: \"4h\",\n      ONE_DAY: \"1d\",\n    };\n\n    const serviceKey = timeframeMap[timeframe] || timeframe;\n    const config = this.getTimeframeConfig(serviceKey);\n    console.log(\n      \"🔍 Timeframe mapping:\",\n      timeframe,\n      \"->\",\n      serviceKey,\n      \"->\",\n      config.label\n    );\n    return config.label;\n  }\n\n  generateMockData(symbol, timeframe) {\n    // Generate realistic mock data based on current price\n    const basePrice = this.getBasePrice(symbol);\n\n    // Map timeframe constants to service keys\n    const timeframeMap = {\n      ONE_MINUTE: \"1m\",\n      FIVE_MINUTES: \"5m\",\n      FIFTEEN_MINUTES: \"15m\",\n      THIRTY_MINUTES: \"30m\",\n      ONE_HOUR: \"1h\",\n      FOUR_HOURS: \"4h\",\n      ONE_DAY: \"1d\",\n    };\n\n    const serviceKey = timeframeMap[timeframe] || timeframe;\n    const config = this.getTimeframeConfig(serviceKey);\n    const data = [];\n\n    for (let i = 0; i < config.dataPoints; i++) {\n      const variation = (Math.random() - 0.5) * 0.1; // ±5% variation\n      const price = basePrice * (1 + variation);\n      data.push(price);\n    }\n\n    return data;\n  }\n\n  getBasePrice(symbol) {\n    const basePrices = {\n      BTC: 45000,\n      ETH: 3000,\n      SOL: 100,\n      ADA: 0.5,\n      DOT: 7,\n      LINK: 15,\n      UNI: 8,\n      MATIC: 1,\n      AVAX: 25,\n      ATOM: 10,\n    };\n    return basePrices[symbol.toUpperCase()] || 100;\n  }\n\n  clearCache() {\n    this.cache.clear();\n  }\n}\n\nexport const priceDataService = new PriceDataService();\nexport default priceDataService;\n"],"mappings":"AAAA,MAAMA,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;IAErC;IACA,IAAI,CAACC,iBAAiB,GAAG;MACvB,IAAI,EAAE;QACJC,IAAI,EAAE,CAAC,GAAG,EAAE;QACZC,QAAQ,EAAE,QAAQ;QAClBC,UAAU,EAAE,EAAE;QACdC,KAAK,EAAE;MACT,CAAC;MACD,IAAI,EAAE;QACJH,IAAI,EAAE,CAAC,GAAG,CAAC;QACXC,QAAQ,EAAE,MAAM;QAChBC,UAAU,EAAE,EAAE;QACdC,KAAK,EAAE;MACT,CAAC;MACD,KAAK,EAAE;QACLH,IAAI,EAAE,CAAC,GAAG,CAAC;QACXC,QAAQ,EAAE,OAAO;QACjBC,UAAU,EAAE,CAAC;QACbC,KAAK,EAAE;MACT,CAAC;MACD,KAAK,EAAE;QACLH,IAAI,EAAE,CAAC,GAAG,CAAC;QACXC,QAAQ,EAAE,OAAO;QACjBC,UAAU,EAAE,CAAC;QACbC,KAAK,EAAE;MACT,CAAC;MACD,IAAI,EAAE;QACJH,IAAI,EAAE,CAAC;QACPC,QAAQ,EAAE,MAAM;QAChBC,UAAU,EAAE,EAAE;QACdC,KAAK,EAAE;MACT,CAAC;MACD,IAAI,EAAE;QACJH,IAAI,EAAE,CAAC;QACPC,QAAQ,EAAE,OAAO;QACjBC,UAAU,EAAE,CAAC;QACbC,KAAK,EAAE;MACT,CAAC;MACD,IAAI,EAAE;QACJH,IAAI,EAAE,CAAC;QACPC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE,CAAC;QACbC,KAAK,EAAE;MACT,CAAC;MACD,IAAI,EAAE;QACJH,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE,MAAM;QAChBC,UAAU,EAAE,CAAC;QACbC,KAAK,EAAE;MACT;IACF,CAAC;IAED,IAAI,CAACC,OAAO,GAAG;MACbC,GAAG,EAAE,SAAS;MACdC,GAAG,EAAE,UAAU;MACfC,GAAG,EAAE,QAAQ;MACbC,GAAG,EAAE,SAAS;MACdC,GAAG,EAAE,UAAU;MACfC,IAAI,EAAE,WAAW;MACjBC,GAAG,EAAE,SAAS;MACdC,KAAK,EAAE,eAAe;MACtBC,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE;IACR,CAAC;EACH;EAEAC,SAASA,CAACC,MAAM,EAAE;IAChB,OAAO,IAAI,CAACZ,OAAO,CAACY,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,IAAID,MAAM,CAACE,WAAW,CAAC,CAAC;EACnE;EAEAC,YAAYA,CAACC,GAAG,EAAE;IAChB,MAAMC,MAAM,GAAG,IAAI,CAACzB,KAAK,CAAC0B,GAAG,CAACF,GAAG,CAAC;IAClC,IAAI,CAACC,MAAM,EAAE,OAAO,KAAK;IACzB,OAAOE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACI,SAAS,GAAG,IAAI,CAAC3B,cAAc;EAC5D;EAEA,MAAM4B,eAAeA,CAACV,MAAM,EAAEW,SAAS,GAAG,IAAI,EAAE;IAC9C;IACA,MAAMC,YAAY,GAAG;MACnBC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,eAAe,EAAE,KAAK;MACtBC,cAAc,EAAE,KAAK;MACrBC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE;IACX,CAAC;IAED,MAAMC,UAAU,GAAGR,YAAY,CAACD,SAAS,CAAC,IAAIA,SAAS;IACvD,MAAMU,MAAM,GACV,IAAI,CAACtC,iBAAiB,CAACqC,UAAU,CAAC,IAAI,IAAI,CAACrC,iBAAiB,CAAC,IAAI,CAAC;IACpE,MAAMuC,QAAQ,GAAG,GAAGtB,MAAM,IAAIoB,UAAU,EAAE;;IAE1C;IACA,IAAI,IAAI,CAACjB,YAAY,CAACmB,QAAQ,CAAC,EAAE;MAC/B,MAAMjB,MAAM,GAAG,IAAI,CAACzB,KAAK,CAAC0B,GAAG,CAACgB,QAAQ,CAAC;MACvC,OAAOjB,MAAM,CAACkB,IAAI;IACpB;IAEA,IAAI;MACF,MAAMC,MAAM,GAAG,IAAI,CAACzB,SAAS,CAACC,MAAM,CAAC;MACrC,MAAMyB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,0CAA0CF,MAAM,sCAAsCH,MAAM,CAACrC,IAAI,EACnG,CAAC;MAED,IAAI,CAACyC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMN,IAAI,GAAG,MAAME,QAAQ,CAACK,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM,CAACC,GAAG,CAAC,CAAC,CAACvB,SAAS,EAAEwB,KAAK,CAAC,KAAKA,KAAK,CAAC;;MAE7D;MACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,KAAK,CAACN,MAAM,CAACO,MAAM,GAAGjB,MAAM,CAACnC,UAAU,CAAC,CAAC;MACvE,MAAMqD,SAAS,GAAGR,MAAM,CACrBS,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAGR,IAAI,KAAK,CAAC,CAAC,CACxCS,KAAK,CAAC,CAAC,EAAEtB,MAAM,CAACnC,UAAU,CAAC;;MAE9B;MACA,IAAI,CAACN,KAAK,CAACgE,GAAG,CAACtB,QAAQ,EAAE;QACvBC,IAAI,EAAEgB,SAAS;QACf9B,SAAS,EAAEF,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC,CAAC;MAEF,OAAO+B,SAAS;IAClB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;;MAErD;MACA,OAAO,IAAI,CAACE,gBAAgB,CAAC/C,MAAM,EAAEW,SAAS,CAAC;IACjD;EACF;EAEAqC,kBAAkBA,CAACrC,SAAS,EAAE;IAC5B,OAAO,IAAI,CAAC5B,iBAAiB,CAAC4B,SAAS,CAAC,IAAI,IAAI,CAAC5B,iBAAiB,CAAC,IAAI,CAAC;EAC1E;EAEAkE,iBAAiBA,CAACtC,SAAS,EAAE;IAC3B;IACA,MAAMC,YAAY,GAAG;MACnBC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,eAAe,EAAE,KAAK;MACtBC,cAAc,EAAE,KAAK;MACrBC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE;IACX,CAAC;IAED,MAAMC,UAAU,GAAGR,YAAY,CAACD,SAAS,CAAC,IAAIA,SAAS;IACvD,MAAMU,MAAM,GAAG,IAAI,CAAC2B,kBAAkB,CAAC5B,UAAU,CAAC;IAClD0B,OAAO,CAACI,GAAG,CACT,uBAAuB,EACvBvC,SAAS,EACT,IAAI,EACJS,UAAU,EACV,IAAI,EACJC,MAAM,CAAClC,KACT,CAAC;IACD,OAAOkC,MAAM,CAAClC,KAAK;EACrB;EAEA4D,gBAAgBA,CAAC/C,MAAM,EAAEW,SAAS,EAAE;IAClC;IACA,MAAMwC,SAAS,GAAG,IAAI,CAACC,YAAY,CAACpD,MAAM,CAAC;;IAE3C;IACA,MAAMY,YAAY,GAAG;MACnBC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,eAAe,EAAE,KAAK;MACtBC,cAAc,EAAE,KAAK;MACrBC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE;IACX,CAAC;IAED,MAAMC,UAAU,GAAGR,YAAY,CAACD,SAAS,CAAC,IAAIA,SAAS;IACvD,MAAMU,MAAM,GAAG,IAAI,CAAC2B,kBAAkB,CAAC5B,UAAU,CAAC;IAClD,MAAMG,IAAI,GAAG,EAAE;IAEf,KAAK,IAAI8B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,MAAM,CAACnC,UAAU,EAAEmE,CAAC,EAAE,EAAE;MAC1C,MAAMC,SAAS,GAAG,CAACnB,IAAI,CAACoB,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;MAC/C,MAAMtB,KAAK,GAAGkB,SAAS,IAAI,CAAC,GAAGG,SAAS,CAAC;MACzC/B,IAAI,CAACiC,IAAI,CAACvB,KAAK,CAAC;IAClB;IAEA,OAAOV,IAAI;EACb;EAEA6B,YAAYA,CAACpD,MAAM,EAAE;IACnB,MAAMyD,UAAU,GAAG;MACjBpE,GAAG,EAAE,KAAK;MACVC,GAAG,EAAE,IAAI;MACTC,GAAG,EAAE,GAAG;MACRC,GAAG,EAAE,GAAG;MACRC,GAAG,EAAE,CAAC;MACNC,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE,CAAC;MACNC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE;IACR,CAAC;IACD,OAAO2D,UAAU,CAACzD,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,IAAI,GAAG;EAChD;EAEAyD,UAAUA,CAAA,EAAG;IACX,IAAI,CAAC9E,KAAK,CAAC+E,KAAK,CAAC,CAAC;EACpB;AACF;AAEA,OAAO,MAAMC,gBAAgB,GAAG,IAAIlF,gBAAgB,CAAC,CAAC;AACtD,eAAekF,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}