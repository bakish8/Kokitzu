{"ast":null,"code":"var _jsxFileName = \"/Users/omribakish/Desktop/CryptoGraphQL/client/src/KokitzuBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n// If using Tailwind's dark mode, you can use 'useTheme' from a context or just rely on the 'dark' class on <body>\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst bgUrl = process.env.PUBLIC_URL + \"/backgroundImage.png\";\nconst KokitzuBackground = () => {\n  _s();\n  const [loaded, setLoaded] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fixed inset-0 z-[-1] bg-cover bg-center bg-no-repeat bg-fixed transition-opacity duration-700 ${loaded ? \"opacity-100\" : \"opacity-0\"}`,\n      style: {\n        backgroundImage: `url('${bgUrl}')`,\n        backgroundColor: \"#0f0f1c\" // fallback for dark\n      },\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: bgUrl,\n        alt: \"Kokitzu background\",\n        className: \"hidden\",\n        onLoad: () => setLoaded(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fixed inset-0 z-0 pointer-events-none transition-colors duration-700 ` +\n      // Tailwind dark mode overlay\n      \"dark:bg-black/50 bg-white/50\" +\n      // Fallback for very small/low-perf devices\n      \" sm:bg-transparent sm:dark:bg-transparent\" +\n      // Mobile: blur and darken overlay\n      \" sm:backdrop-blur-none backdrop-blur-md\" + \" sm:backdrop-brightness-100 backdrop-brightness-75\",\n      style: {\n        backgroundColor: undefined\n      },\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 z-[-2] bg-[#0f0f1c] dark:bg-[#0f0f1c] bg-[#f7f8fa] dark:bg-[#0f0f1c] sm:hidden\",\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(KokitzuBackground, \"5HkI/FtSFoHY/ZszUPbNWJy51d0=\");\n_c = KokitzuBackground;\nexport default KokitzuBackground;\nvar _c;\n$RefreshReg$(_c, \"KokitzuBackground\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","bgUrl","process","env","PUBLIC_URL","KokitzuBackground","_s","loaded","setLoaded","children","className","style","backgroundImage","backgroundColor","src","alt","onLoad","fileName","_jsxFileName","lineNumber","columnNumber","undefined","_c","$RefreshReg$"],"sources":["/Users/omribakish/Desktop/CryptoGraphQL/client/src/KokitzuBackground.js"],"sourcesContent":["import React, { useState } from \"react\";\n// If using Tailwind's dark mode, you can use 'useTheme' from a context or just rely on the 'dark' class on <body>\n\nconst bgUrl = process.env.PUBLIC_URL + \"/backgroundImage.png\";\n\nconst KokitzuBackground = () => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <>\n      {/* Background image layer */}\n      <div\n        className={`fixed inset-0 z-[-1] bg-cover bg-center bg-no-repeat bg-fixed transition-opacity duration-700 ${\n          loaded ? \"opacity-100\" : \"opacity-0\"\n        }`}\n        style={{\n          backgroundImage: `url('${bgUrl}')`,\n          backgroundColor: \"#0f0f1c\", // fallback for dark\n        }}\n        aria-hidden=\"true\"\n      >\n        {/* Preload image for fade-in */}\n        <img\n          src={bgUrl}\n          alt=\"Kokitzu background\"\n          className=\"hidden\"\n          onLoad={() => setLoaded(true)}\n        />\n      </div>\n      {/* Overlay for theme and mobile legibility */}\n      <div\n        className={\n          `fixed inset-0 z-0 pointer-events-none transition-colors duration-700 ` +\n          // Tailwind dark mode overlay\n          \"dark:bg-black/50 bg-white/50\" +\n          // Fallback for very small/low-perf devices\n          \" sm:bg-transparent sm:dark:bg-transparent\" +\n          // Mobile: blur and darken overlay\n          \" sm:backdrop-blur-none backdrop-blur-md\" +\n          \" sm:backdrop-brightness-100 backdrop-brightness-75\"\n        }\n        style={{\n          backgroundColor: undefined,\n        }}\n        aria-hidden=\"true\"\n      />\n      {/* Fallback solid color for very small screens or no image support */}\n      <div\n        className=\"fixed inset-0 z-[-2] bg-[#0f0f1c] dark:bg-[#0f0f1c] bg-[#f7f8fa] dark:bg-[#0f0f1c] sm:hidden\"\n        aria-hidden=\"true\"\n      />\n    </>\n  );\n};\n\nexport default KokitzuBackground;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,sBAAsB;AAE7D,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3C,oBACEE,OAAA,CAAAE,SAAA;IAAAS,QAAA,gBAEEX,OAAA;MACEY,SAAS,EAAE,iGACTH,MAAM,GAAG,aAAa,GAAG,WAAW,EACnC;MACHI,KAAK,EAAE;QACLC,eAAe,EAAE,QAAQX,KAAK,IAAI;QAClCY,eAAe,EAAE,SAAS,CAAE;MAC9B,CAAE;MACF,eAAY,MAAM;MAAAJ,QAAA,eAGlBX,OAAA;QACEgB,GAAG,EAAEb,KAAM;QACXc,GAAG,EAAC,oBAAoB;QACxBL,SAAS,EAAC,QAAQ;QAClBM,MAAM,EAAEA,CAAA,KAAMR,SAAS,CAAC,IAAI;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENtB,OAAA;MACEY,SAAS,EACP,uEAAuE;MACvE;MACA,8BAA8B;MAC9B;MACA,2CAA2C;MAC3C;MACA,yCAAyC,GACzC,oDACD;MACDC,KAAK,EAAE;QACLE,eAAe,EAAEQ;MACnB,CAAE;MACF,eAAY;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,eAEFtB,OAAA;MACEY,SAAS,EAAC,8FAA8F;MACxG,eAAY;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC;EAAA,eACF,CAAC;AAEP,CAAC;AAACd,EAAA,CAhDID,iBAAiB;AAAAiB,EAAA,GAAjBjB,iBAAiB;AAkDvB,eAAeA,iBAAiB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}