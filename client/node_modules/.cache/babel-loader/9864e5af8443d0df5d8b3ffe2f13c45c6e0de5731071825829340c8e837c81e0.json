{"ast":null,"code":"var _jsxFileName = \"/Users/omribakish/Desktop/CryptoGraphQL/client/src/contexts/NetworkContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useWallet } from \"./WalletContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NetworkContext = /*#__PURE__*/createContext();\nexport const useNetwork = () => {\n  _s();\n  const context = useContext(NetworkContext);\n  if (!context) {\n    throw new Error(\"useNetwork must be used within a NetworkProvider\");\n  }\n  return context;\n};\n\n// Network configurations\n_s(useNetwork, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NETWORKS = {\n  mainnet: {\n    name: \"Ethereum Mainnet\",\n    chainId: \"1\",\n    rpcUrl: \"https://mainnet.infura.io/v3/your-project-id\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18\n    },\n    blockExplorerUrls: [\"https://etherscan.io\"],\n    isTestnet: false\n  },\n  sepolia: {\n    name: \"Sepolia Testnet\",\n    chainId: \"11155111\",\n    rpcUrl: \"https://sepolia.infura.io/v3/your-project-id\",\n    nativeCurrency: {\n      name: \"Sepolia Ether\",\n      symbol: \"Sepolia ETH\",\n      decimals: 18\n    },\n    blockExplorerUrls: [\"https://sepolia.etherscan.io\"],\n    isTestnet: true\n  }\n};\nexport const NetworkProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentNetwork, setCurrentNetwork] = useState(\"sepolia\"); // Default to Sepolia\n  const [isNetworkSwitching, setIsNetworkSwitching] = useState(false);\n  const {\n    switchNetwork: walletSwitchNetwork,\n    chainId: walletChainId\n  } = useWallet();\n\n  // Get current network configuration\n  const networkConfig = NETWORKS[currentNetwork] || NETWORKS.sepolia;\n\n  // Switch network\n  const switchNetwork = async networkType => {\n    try {\n      setIsNetworkSwitching(true);\n      console.log(`🌐 Switching to ${networkType} network`);\n\n      // Update local state\n      setCurrentNetwork(networkType);\n\n      // If wallet is connected, switch network in wallet too\n      if (walletChainId && walletChainId !== NETWORKS[networkType].chainId) {\n        await walletSwitchNetwork(NETWORKS[networkType].chainId);\n      }\n      console.log(`✅ Switched to ${networkType} network`);\n    } catch (error) {\n      console.error(`❌ Failed to switch to ${networkType}:`, error);\n      // Revert to previous network on error\n      setCurrentNetwork(currentNetwork);\n      throw error;\n    } finally {\n      setIsNetworkSwitching(false);\n    }\n  };\n\n  // Sync with wallet chain ID\n  useEffect(() => {\n    if (walletChainId) {\n      const networkType = Object.keys(NETWORKS).find(key => NETWORKS[key].chainId === walletChainId.toString());\n      if (networkType && networkType !== currentNetwork) {\n        console.log(`🔄 Syncing network with wallet: ${networkType}`);\n        setCurrentNetwork(networkType);\n      }\n    }\n  }, [walletChainId, currentNetwork]);\n  const value = {\n    currentNetwork,\n    networkConfig,\n    switchNetwork,\n    isNetworkSwitching,\n    NETWORKS\n  };\n  return /*#__PURE__*/_jsxDEV(NetworkContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s2(NetworkProvider, \"vAHnAm/mgk62xTK8nWNP3G6PP1Q=\", false, function () {\n  return [useWallet];\n});\n_c = NetworkProvider;\nvar _c;\n$RefreshReg$(_c, \"NetworkProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useWallet","jsxDEV","_jsxDEV","NetworkContext","useNetwork","_s","context","Error","NETWORKS","mainnet","name","chainId","rpcUrl","nativeCurrency","symbol","decimals","blockExplorerUrls","isTestnet","sepolia","NetworkProvider","children","_s2","currentNetwork","setCurrentNetwork","isNetworkSwitching","setIsNetworkSwitching","switchNetwork","walletSwitchNetwork","walletChainId","networkConfig","networkType","console","log","error","Object","keys","find","key","toString","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/omribakish/Desktop/CryptoGraphQL/client/src/contexts/NetworkContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useWallet } from \"./WalletContext\";\n\nconst NetworkContext = createContext();\n\nexport const useNetwork = () => {\n  const context = useContext(NetworkContext);\n  if (!context) {\n    throw new Error(\"useNetwork must be used within a NetworkProvider\");\n  }\n  return context;\n};\n\n// Network configurations\nexport const NETWORKS = {\n  mainnet: {\n    name: \"Ethereum Mainnet\",\n    chainId: \"1\",\n    rpcUrl: \"https://mainnet.infura.io/v3/your-project-id\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    blockExplorerUrls: [\"https://etherscan.io\"],\n    isTestnet: false,\n  },\n  sepolia: {\n    name: \"Sepolia Testnet\",\n    chainId: \"11155111\",\n    rpcUrl: \"https://sepolia.infura.io/v3/your-project-id\",\n    nativeCurrency: {\n      name: \"Sepolia Ether\",\n      symbol: \"Sepolia ETH\",\n      decimals: 18,\n    },\n    blockExplorerUrls: [\"https://sepolia.etherscan.io\"],\n    isTestnet: true,\n  },\n};\n\nexport const NetworkProvider = ({ children }) => {\n  const [currentNetwork, setCurrentNetwork] = useState(\"sepolia\"); // Default to Sepolia\n  const [isNetworkSwitching, setIsNetworkSwitching] = useState(false);\n  const { switchNetwork: walletSwitchNetwork, chainId: walletChainId } =\n    useWallet();\n\n  // Get current network configuration\n  const networkConfig = NETWORKS[currentNetwork] || NETWORKS.sepolia;\n\n  // Switch network\n  const switchNetwork = async (networkType) => {\n    try {\n      setIsNetworkSwitching(true);\n      console.log(`🌐 Switching to ${networkType} network`);\n\n      // Update local state\n      setCurrentNetwork(networkType);\n\n      // If wallet is connected, switch network in wallet too\n      if (walletChainId && walletChainId !== NETWORKS[networkType].chainId) {\n        await walletSwitchNetwork(NETWORKS[networkType].chainId);\n      }\n\n      console.log(`✅ Switched to ${networkType} network`);\n    } catch (error) {\n      console.error(`❌ Failed to switch to ${networkType}:`, error);\n      // Revert to previous network on error\n      setCurrentNetwork(currentNetwork);\n      throw error;\n    } finally {\n      setIsNetworkSwitching(false);\n    }\n  };\n\n  // Sync with wallet chain ID\n  useEffect(() => {\n    if (walletChainId) {\n      const networkType = Object.keys(NETWORKS).find(\n        (key) => NETWORKS[key].chainId === walletChainId.toString()\n      );\n\n      if (networkType && networkType !== currentNetwork) {\n        console.log(`🔄 Syncing network with wallet: ${networkType}`);\n        setCurrentNetwork(networkType);\n      }\n    }\n  }, [walletChainId, currentNetwork]);\n\n  const value = {\n    currentNetwork,\n    networkConfig,\n    switchNetwork,\n    isNetworkSwitching,\n    NETWORKS,\n  };\n\n  return (\n    <NetworkContext.Provider value={value}>{children}</NetworkContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}