{"ast":null,"code":"var _jsxFileName = \"/Users/omribakish/Desktop/CryptoGraphQL/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo, Suspense, lazy } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { WalletProvider, useWallet } from \"./contexts/WalletContext\";\nimport { NetworkProvider } from \"./contexts/NetworkContext\";\n\n// Import components\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport Navigation from \"./components/Navigation\";\nimport LiveMarketData from \"./components/LiveMarketData\";\nimport BinaryOptions from \"./components/BinaryOptions\";\nimport Portfolio from \"./components/Portfolio\";\nimport BetConfirmationModal from \"./components/BetConfirmationModal\";\n\n// Import hooks\nimport usePerformanceMonitor from \"./hooks/usePerformanceMonitor\";\n\n// Import GraphQL queries and mutations\nimport { GET_CRYPTO_PRICES, GET_COINS, GET_USER_STATS, GET_ACTIVE_BETS, GET_BET_HISTORY, PLACE_BET } from \"./graphql/queries\";\n\n// Import constants\nimport { TIMEFRAMES } from \"./constants/timeframes\";\n\n// Lazy load components for better performance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SkeletonCryptoCard = /*#__PURE__*/lazy(_c = () => import(\"./components/SkeletonCryptoCard\"));\n_c2 = SkeletonCryptoCard;\nconst SkeletonStats = /*#__PURE__*/lazy(_c3 = () => import(\"./components/SkeletonStats\"));\n_c4 = SkeletonStats;\nconst backgroundStyle = {\n  backgroundImage: `url(${process.env.PUBLIC_URL}/images/backgroundImage.png)`,\n  backgroundSize: \"cover\",\n  backgroundPosition: \"center\",\n  backgroundRepeat: \"no-repeat\",\n  minHeight: \"100vh\"\n};\nfunction App() {\n  _s();\n  var _getCurrentCrypto, _getCurrentCrypto2;\n  // Performance monitoring\n  usePerformanceMonitor();\n\n  // Optimized state management\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [previousPrices, setPreviousPrices] = useState({});\n  const [selectedCrypto, setSelectedCrypto] = useState(null);\n  const [selectedTimeframe, setSelectedTimeframe] = useState(\"ONE_MINUTE\");\n  const [betAmount, setBetAmount] = useState(100);\n  const [betType, setBetType] = useState(\"UP\");\n  const [showBetModal, setShowBetModal] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"prices\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isMobileNavOpen, setIsMobileNavOpen] = useState(false);\n\n  // Apollo client setup\n  const httpLink = createHttpLink({\n    uri: \"http://localhost:4000/graphql\"\n  });\n  const apolloClient = useMemo(() => new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache()\n  }), []);\n\n  // Optimized queries with better caching\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(GET_CRYPTO_PRICES, {\n    pollInterval: 30000,\n    notifyOnNetworkStatusChange: true,\n    errorPolicy: \"all\"\n  });\n  const {\n    data: coinsData,\n    loading: coinsLoading\n  } = useQuery(GET_COINS, {\n    errorPolicy: \"all\"\n  });\n  const {\n    data: userStats\n  } = useQuery(GET_USER_STATS, {\n    variables: {\n      walletAddress: walletAddress || \"\"\n    },\n    pollInterval: 10000,\n    errorPolicy: \"all\",\n    skip: !walletAddress\n  });\n  const {\n    data: activeBetsData\n  } = useQuery(GET_ACTIVE_BETS, {\n    variables: {\n      walletAddress: walletAddress || \"\"\n    },\n    pollInterval: 5000,\n    errorPolicy: \"all\",\n    skip: !walletAddress\n  });\n  const {\n    data: betHistoryData,\n    loading: betHistoryLoading\n  } = useQuery(GET_BET_HISTORY, {\n    variables: {\n      walletAddress: walletAddress || \"\"\n    },\n    pollInterval: 10000,\n    errorPolicy: \"all\",\n    skip: !walletAddress\n  });\n  const [placeBet] = useMutation(PLACE_BET, {\n    refetchQueries: [{\n      query: GET_USER_STATS,\n      variables: {\n        walletAddress: walletAddress || \"\"\n      }\n    }, {\n      query: GET_ACTIVE_BETS,\n      variables: {\n        walletAddress: walletAddress || \"\"\n      }\n    }],\n    onError: error => {\n      console.error(\"Bet placement error:\", error);\n    }\n  });\n\n  // Optimized animated prices with useMemo\n  const animatedPrices = useMemo(() => {\n    if (!(data !== null && data !== void 0 && data.cryptoPrices)) return [];\n    return data.cryptoPrices.map(crypto => crypto.price);\n  }, [data === null || data === void 0 ? void 0 : data.cryptoPrices]);\n\n  // Memoized filtered crypto data\n  const filteredCryptoData = useMemo(() => {\n    if (!(data !== null && data !== void 0 && data.cryptoPrices)) return [];\n    return data.cryptoPrices.filter(crypto => searchQuery === \"\" || crypto.name.toLowerCase().includes(searchQuery.toLowerCase()) || crypto.symbol.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [data === null || data === void 0 ? void 0 : data.cryptoPrices, searchQuery]);\n\n  // Optimized handlers with useCallback\n  const handleRefresh = useCallback(async () => {\n    performance.mark(\"refresh-start\");\n    setIsRefreshing(true);\n    try {\n      await refetch();\n    } catch (error) {\n      console.error(\"Refresh error:\", error);\n    } finally {\n      setTimeout(() => {\n        setIsRefreshing(false);\n        performance.mark(\"refresh-end\");\n        performance.measure(\"refresh-duration\", \"refresh-start\", \"refresh-end\");\n      }, 1000);\n    }\n  }, [refetch]);\n  const handlePlaceBet = useCallback(async () => {\n    if (!walletAddress) {\n      alert(\"Please connect your wallet to place a bet\");\n      return;\n    }\n    try {\n      await placeBet({\n        variables: {\n          input: {\n            cryptoSymbol: selectedCrypto,\n            betType: betType,\n            amount: parseFloat(betAmount),\n            timeframe: selectedTimeframe,\n            walletAddress: walletAddress\n          }\n        }\n      });\n      setShowBetModal(false);\n      setBetAmount(100);\n    } catch (error) {\n      console.error(\"Error placing bet:\", error);\n      alert(error.message);\n    }\n  }, [placeBet, selectedCrypto, betType, betAmount, selectedTimeframe, walletAddress]);\n  const getPriceChange = useCallback((symbol, currentPrice) => {\n    const previousPrice = previousPrices[symbol];\n    if (!previousPrice || previousPrice === currentPrice) return null;\n    return {\n      direction: currentPrice > previousPrice ? \"up\" : \"down\",\n      percentage: ((currentPrice - previousPrice) / previousPrice * 100).toFixed(2)\n    };\n  }, [previousPrices]);\n\n  // Preload critical resources\n  useEffect(() => {\n    const preloadImage = new Image();\n    preloadImage.src = `${process.env.PUBLIC_URL}/images/backgroundImage.png`;\n  }, []);\n\n  // Optimized price tracking\n  useEffect(() => {\n    if (data !== null && data !== void 0 && data.cryptoPrices) {\n      setPreviousPrices(prev => {\n        const newPrices = {};\n        data.cryptoPrices.forEach(crypto => {\n          newPrices[crypto.symbol] = prev[crypto.symbol] || crypto.price;\n        });\n        return newPrices;\n      });\n    }\n  }, [data]);\n\n  // Set default selected crypto when coins load\n  useEffect(() => {\n    var _coinsData$coins;\n    if (!selectedCrypto && (coinsData === null || coinsData === void 0 ? void 0 : (_coinsData$coins = coinsData.coins) === null || _coinsData$coins === void 0 ? void 0 : _coinsData$coins.length) > 0) {\n      setSelectedCrypto(coinsData.coins[0].symbol);\n    }\n  }, [coinsData, selectedCrypto]);\n\n  // Helper for timer with memoization\n  const getTimeLeft = useCallback(expiresAt => {\n    const now = new Date();\n    const expiry = new Date(expiresAt);\n    const diff = expiry - now;\n    if (diff <= 0) return \"Expired\";\n    const min = Math.floor(diff / 60000);\n    const sec = Math.floor(diff % 60000 / 1000);\n    return `${min}:${sec.toString().padStart(2, \"0\")}`;\n  }, []);\n  const getCurrentCrypto = useCallback(() => {\n    var _data$cryptoPrices;\n    return data === null || data === void 0 ? void 0 : (_data$cryptoPrices = data.cryptoPrices) === null || _data$cryptoPrices === void 0 ? void 0 : _data$cryptoPrices.find(crypto => crypto.symbol === selectedCrypto);\n  }, [data, selectedCrypto]);\n  const getSelectedTimeframeInfo = useCallback(() => {\n    return TIMEFRAMES.find(tf => tf.value === selectedTimeframe);\n  }, [selectedTimeframe]);\n\n  // Timer update for Active Bets\n  const [, setTimerTick] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimerTick(tick => tick + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Error handling\n  if (error && !data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `app ${isDarkMode ? \"dark\" : \"light\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kokitzu-logo\",\n          children: \"Kokitzu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Connection Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleRefresh,\n            className: \"retry-button\",\n            children: \"Retry Connection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: apolloClient,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n      children: /*#__PURE__*/_jsxDEV(NetworkProvider, {\n        children: /*#__PURE__*/_jsxDEV(Router, {\n          children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: backgroundStyle,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  position: \"fixed\",\n                  top: 0,\n                  left: 0,\n                  width: \"100vw\",\n                  height: \"100vh\",\n                  zIndex: 0,\n                  pointerEvents: \"none\",\n                  background: isDarkMode ? \"rgba(0,0,0,0.5)\" : \"rgba(255,255,255,0.9)\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `app ${isDarkMode ? \"dark\" : \"light\"}`,\n                children: [/*#__PURE__*/_jsxDEV(Navigation, {\n                  isDarkMode: isDarkMode,\n                  setIsDarkMode: setIsDarkMode,\n                  isRefreshing: isRefreshing,\n                  handleRefresh: handleRefresh,\n                  isMobileNavOpen: isMobileNavOpen,\n                  setActiveTab: setActiveTab,\n                  coinsData: coinsData,\n                  searchQuery: searchQuery,\n                  setSearchQuery: setSearchQuery,\n                  setSelectedCrypto: setSelectedCrypto,\n                  setBetType: setBetType,\n                  setSelectedTimeframe: setSelectedTimeframe,\n                  setBetAmount: setBetAmount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n                  className: \"main-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"breadcrumb\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"breadcrumb-item\",\n                      children: \"Kokitzu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 337,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"breadcrumb-item active\",\n                      children: [window.location.pathname === \"/\" && \"Live Prices\", window.location.pathname === \"/betting\" && \"Binary Options\", window.location.pathname === \"/portfolio\" && \"Portfolio\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 338,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 336,\n                    columnNumber: 21\n                  }, this), window.location.pathname === \"/\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"search-container\",\n                    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                      className: \"search-icon\",\n                      width: \"20\",\n                      height: \"20\",\n                      viewBox: \"0 0 24 24\",\n                      fill: \"none\",\n                      stroke: \"currentColor\",\n                      strokeWidth: \"2\",\n                      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                        cx: \"11\",\n                        cy: \"11\",\n                        r: \"8\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 359,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                        d: \"M21 21l-4.35-4.35\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 360,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 350,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      className: \"search-input\",\n                      placeholder: \"Search cryptocurrencies...\",\n                      value: searchQuery,\n                      onChange: e => setSearchQuery(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 362,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Routes, {\n                    children: [/*#__PURE__*/_jsxDEV(Route, {\n                      path: \"/\",\n                      element: /*#__PURE__*/_jsxDEV(LiveMarketData, {\n                        filteredCryptoData: filteredCryptoData,\n                        loading: loading,\n                        SkeletonCryptoCard: SkeletonCryptoCard,\n                        getPriceChange: getPriceChange,\n                        animatedPrices: animatedPrices,\n                        setSelectedCrypto: setSelectedCrypto,\n                        setBetType: setBetType\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 376,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 373,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Route, {\n                      path: \"/betting\",\n                      element: /*#__PURE__*/_jsxDEV(BinaryOptions, {\n                        coinsData: coinsData,\n                        data: data,\n                        loading: loading,\n                        SkeletonCryptoCard: SkeletonCryptoCard,\n                        selectedCrypto: selectedCrypto,\n                        setSelectedCrypto: setSelectedCrypto,\n                        selectedTimeframe: selectedTimeframe,\n                        setSelectedTimeframe: setSelectedTimeframe,\n                        betAmount: betAmount,\n                        setBetAmount: setBetAmount,\n                        betType: betType,\n                        setBetType: setBetType,\n                        getSelectedTimeframeInfo: getSelectedTimeframeInfo,\n                        handlePlaceBet: handlePlaceBet,\n                        showBetModal: showBetModal,\n                        setShowBetModal: setShowBetModal,\n                        getPriceChange: getPriceChange,\n                        animatedPrices: animatedPrices,\n                        activeBetsData: activeBetsData,\n                        getTimeLeft: getTimeLeft,\n                        currentPrice: (_getCurrentCrypto = getCurrentCrypto()) === null || _getCurrentCrypto === void 0 ? void 0 : _getCurrentCrypto.price\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 390,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 387,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Route, {\n                      path: \"/portfolio\",\n                      element: /*#__PURE__*/_jsxDEV(Portfolio, {\n                        userStats: userStats,\n                        betHistoryLoading: betHistoryLoading,\n                        betHistoryData: betHistoryData,\n                        getTimeLeft: getTimeLeft,\n                        currentPrice: (_getCurrentCrypto2 = getCurrentCrypto()) === null || _getCurrentCrypto2 === void 0 ? void 0 : _getCurrentCrypto2.price\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 418,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 415,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(BetConfirmationModal, {\n                  showBetModal: showBetModal,\n                  setShowBetModal: setShowBetModal,\n                  selectedCrypto: selectedCrypto,\n                  betType: betType,\n                  betAmount: betAmount,\n                  getSelectedTimeframeInfo: getSelectedTimeframeInfo,\n                  handlePlaceBet: handlePlaceBet\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n                  className: \"footer\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"footer-content\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"footer-links\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        children: \"Powered by CoinGecko\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 445,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: \"\\u2022\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 446,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: \"Binary Options Trading\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 447,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 444,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 443,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rbprEYOuKzjxMpj8Th0/udpkWxE=\", false, function () {\n  return [usePerformanceMonitor, useQuery, useQuery, useQuery, useQuery, useQuery, useMutation];\n});\n_c5 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"SkeletonCryptoCard$lazy\");\n$RefreshReg$(_c2, \"SkeletonCryptoCard\");\n$RefreshReg$(_c3, \"SkeletonStats$lazy\");\n$RefreshReg$(_c4, \"SkeletonStats\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","Suspense","lazy","useQuery","useMutation","BrowserRouter","Router","Routes","Route","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","WalletProvider","useWallet","NetworkProvider","ErrorBoundary","Navigation","LiveMarketData","BinaryOptions","Portfolio","BetConfirmationModal","usePerformanceMonitor","GET_CRYPTO_PRICES","GET_COINS","GET_USER_STATS","GET_ACTIVE_BETS","GET_BET_HISTORY","PLACE_BET","TIMEFRAMES","jsxDEV","_jsxDEV","SkeletonCryptoCard","_c","_c2","SkeletonStats","_c3","_c4","backgroundStyle","backgroundImage","process","env","PUBLIC_URL","backgroundSize","backgroundPosition","backgroundRepeat","minHeight","App","_s","_getCurrentCrypto","_getCurrentCrypto2","isDarkMode","setIsDarkMode","isRefreshing","setIsRefreshing","previousPrices","setPreviousPrices","selectedCrypto","setSelectedCrypto","selectedTimeframe","setSelectedTimeframe","betAmount","setBetAmount","betType","setBetType","showBetModal","setShowBetModal","activeTab","setActiveTab","searchQuery","setSearchQuery","isMobileNavOpen","setIsMobileNavOpen","httpLink","uri","apolloClient","link","cache","loading","error","data","refetch","pollInterval","notifyOnNetworkStatusChange","errorPolicy","coinsData","coinsLoading","userStats","variables","walletAddress","skip","activeBetsData","betHistoryData","betHistoryLoading","placeBet","refetchQueries","query","onError","console","animatedPrices","cryptoPrices","map","crypto","price","filteredCryptoData","filter","name","toLowerCase","includes","symbol","handleRefresh","performance","mark","setTimeout","measure","handlePlaceBet","alert","input","cryptoSymbol","amount","parseFloat","timeframe","message","getPriceChange","currentPrice","previousPrice","direction","percentage","toFixed","preloadImage","Image","src","prev","newPrices","forEach","_coinsData$coins","coins","length","getTimeLeft","expiresAt","now","Date","expiry","diff","min","Math","floor","sec","toString","padStart","getCurrentCrypto","_data$cryptoPrices","find","getSelectedTimeframeInfo","tf","value","setTimerTick","interval","setInterval","tick","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","client","style","position","top","left","width","height","zIndex","pointerEvents","background","window","location","pathname","viewBox","fill","stroke","strokeWidth","cx","cy","r","d","type","placeholder","onChange","e","target","path","element","_c5","$RefreshReg$"],"sources":["/Users/omribakish/Desktop/CryptoGraphQL/client/src/App.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n  Suspense,\n  lazy,\n} from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { WalletProvider, useWallet } from \"./contexts/WalletContext\";\nimport { NetworkProvider } from \"./contexts/NetworkContext\";\n\n// Import components\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport Navigation from \"./components/Navigation\";\nimport LiveMarketData from \"./components/LiveMarketData\";\nimport BinaryOptions from \"./components/BinaryOptions\";\nimport Portfolio from \"./components/Portfolio\";\nimport BetConfirmationModal from \"./components/BetConfirmationModal\";\n\n// Import hooks\nimport usePerformanceMonitor from \"./hooks/usePerformanceMonitor\";\n\n// Import GraphQL queries and mutations\nimport {\n  GET_CRYPTO_PRICES,\n  GET_COINS,\n  GET_USER_STATS,\n  GET_ACTIVE_BETS,\n  GET_BET_HISTORY,\n  PLACE_BET,\n} from \"./graphql/queries\";\n\n// Import constants\nimport { TIMEFRAMES } from \"./constants/timeframes\";\n\n// Lazy load components for better performance\nconst SkeletonCryptoCard = lazy(() =>\n  import(\"./components/SkeletonCryptoCard\")\n);\nconst SkeletonStats = lazy(() => import(\"./components/SkeletonStats\"));\n\nconst backgroundStyle = {\n  backgroundImage: `url(${process.env.PUBLIC_URL}/images/backgroundImage.png)`,\n  backgroundSize: \"cover\",\n  backgroundPosition: \"center\",\n  backgroundRepeat: \"no-repeat\",\n  minHeight: \"100vh\",\n};\n\nfunction App() {\n  // Performance monitoring\n  usePerformanceMonitor();\n\n  // Optimized state management\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [previousPrices, setPreviousPrices] = useState({});\n  const [selectedCrypto, setSelectedCrypto] = useState(null);\n  const [selectedTimeframe, setSelectedTimeframe] = useState(\"ONE_MINUTE\");\n  const [betAmount, setBetAmount] = useState(100);\n  const [betType, setBetType] = useState(\"UP\");\n  const [showBetModal, setShowBetModal] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"prices\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isMobileNavOpen, setIsMobileNavOpen] = useState(false);\n\n  // Apollo client setup\n  const httpLink = createHttpLink({ uri: \"http://localhost:4000/graphql\" });\n  const apolloClient = useMemo(\n    () =>\n      new ApolloClient({\n        link: httpLink,\n        cache: new InMemoryCache(),\n      }),\n    []\n  );\n\n  // Optimized queries with better caching\n  const { loading, error, data, refetch } = useQuery(GET_CRYPTO_PRICES, {\n    pollInterval: 30000,\n    notifyOnNetworkStatusChange: true,\n    errorPolicy: \"all\",\n  });\n\n  const { data: coinsData, loading: coinsLoading } = useQuery(GET_COINS, {\n    errorPolicy: \"all\",\n  });\n\n  const { data: userStats } = useQuery(GET_USER_STATS, {\n    variables: { walletAddress: walletAddress || \"\" },\n    pollInterval: 10000,\n    errorPolicy: \"all\",\n    skip: !walletAddress,\n  });\n\n  const { data: activeBetsData } = useQuery(GET_ACTIVE_BETS, {\n    variables: { walletAddress: walletAddress || \"\" },\n    pollInterval: 5000,\n    errorPolicy: \"all\",\n    skip: !walletAddress,\n  });\n\n  const { data: betHistoryData, loading: betHistoryLoading } = useQuery(\n    GET_BET_HISTORY,\n    {\n      variables: { walletAddress: walletAddress || \"\" },\n      pollInterval: 10000,\n      errorPolicy: \"all\",\n      skip: !walletAddress,\n    }\n  );\n\n  const [placeBet] = useMutation(PLACE_BET, {\n    refetchQueries: [\n      {\n        query: GET_USER_STATS,\n        variables: { walletAddress: walletAddress || \"\" },\n      },\n      {\n        query: GET_ACTIVE_BETS,\n        variables: { walletAddress: walletAddress || \"\" },\n      },\n    ],\n    onError: (error) => {\n      console.error(\"Bet placement error:\", error);\n    },\n  });\n\n  // Optimized animated prices with useMemo\n  const animatedPrices = useMemo(() => {\n    if (!data?.cryptoPrices) return [];\n    return data.cryptoPrices.map((crypto) => crypto.price);\n  }, [data?.cryptoPrices]);\n\n  // Memoized filtered crypto data\n  const filteredCryptoData = useMemo(() => {\n    if (!data?.cryptoPrices) return [];\n    return data.cryptoPrices.filter(\n      (crypto) =>\n        searchQuery === \"\" ||\n        crypto.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        crypto.symbol.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  }, [data?.cryptoPrices, searchQuery]);\n\n  // Optimized handlers with useCallback\n  const handleRefresh = useCallback(async () => {\n    performance.mark(\"refresh-start\");\n    setIsRefreshing(true);\n    try {\n      await refetch();\n    } catch (error) {\n      console.error(\"Refresh error:\", error);\n    } finally {\n      setTimeout(() => {\n        setIsRefreshing(false);\n        performance.mark(\"refresh-end\");\n        performance.measure(\"refresh-duration\", \"refresh-start\", \"refresh-end\");\n      }, 1000);\n    }\n  }, [refetch]);\n\n  const handlePlaceBet = useCallback(async () => {\n    if (!walletAddress) {\n      alert(\"Please connect your wallet to place a bet\");\n      return;\n    }\n\n    try {\n      await placeBet({\n        variables: {\n          input: {\n            cryptoSymbol: selectedCrypto,\n            betType: betType,\n            amount: parseFloat(betAmount),\n            timeframe: selectedTimeframe,\n            walletAddress: walletAddress,\n          },\n        },\n      });\n      setShowBetModal(false);\n      setBetAmount(100);\n    } catch (error) {\n      console.error(\"Error placing bet:\", error);\n      alert(error.message);\n    }\n  }, [\n    placeBet,\n    selectedCrypto,\n    betType,\n    betAmount,\n    selectedTimeframe,\n    walletAddress,\n  ]);\n\n  const getPriceChange = useCallback(\n    (symbol, currentPrice) => {\n      const previousPrice = previousPrices[symbol];\n      if (!previousPrice || previousPrice === currentPrice) return null;\n      return {\n        direction: currentPrice > previousPrice ? \"up\" : \"down\",\n        percentage: (\n          ((currentPrice - previousPrice) / previousPrice) *\n          100\n        ).toFixed(2),\n      };\n    },\n    [previousPrices]\n  );\n\n  // Preload critical resources\n  useEffect(() => {\n    const preloadImage = new Image();\n    preloadImage.src = `${process.env.PUBLIC_URL}/images/backgroundImage.png`;\n  }, []);\n\n  // Optimized price tracking\n  useEffect(() => {\n    if (data?.cryptoPrices) {\n      setPreviousPrices((prev) => {\n        const newPrices = {};\n        data.cryptoPrices.forEach((crypto) => {\n          newPrices[crypto.symbol] = prev[crypto.symbol] || crypto.price;\n        });\n        return newPrices;\n      });\n    }\n  }, [data]);\n\n  // Set default selected crypto when coins load\n  useEffect(() => {\n    if (!selectedCrypto && coinsData?.coins?.length > 0) {\n      setSelectedCrypto(coinsData.coins[0].symbol);\n    }\n  }, [coinsData, selectedCrypto]);\n\n  // Helper for timer with memoization\n  const getTimeLeft = useCallback((expiresAt) => {\n    const now = new Date();\n    const expiry = new Date(expiresAt);\n    const diff = expiry - now;\n    if (diff <= 0) return \"Expired\";\n    const min = Math.floor(diff / 60000);\n    const sec = Math.floor((diff % 60000) / 1000);\n    return `${min}:${sec.toString().padStart(2, \"0\")}`;\n  }, []);\n\n  const getCurrentCrypto = useCallback(() => {\n    return data?.cryptoPrices?.find(\n      (crypto) => crypto.symbol === selectedCrypto\n    );\n  }, [data, selectedCrypto]);\n\n  const getSelectedTimeframeInfo = useCallback(() => {\n    return TIMEFRAMES.find((tf) => tf.value === selectedTimeframe);\n  }, [selectedTimeframe]);\n\n  // Timer update for Active Bets\n  const [, setTimerTick] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimerTick((tick) => tick + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Error handling\n  if (error && !data) {\n    return (\n      <div className={`app ${isDarkMode ? \"dark\" : \"light\"}`}>\n        <div className=\"error-container\">\n          <div className=\"kokitzu-logo\">Kokitzu</div>\n          <div className=\"error-message\">\n            <h2>Connection Error</h2>\n            <p>{error.message}</p>\n            <button onClick={handleRefresh} className=\"retry-button\">\n              Retry Connection\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <WalletProvider>\n        <NetworkProvider>\n          <Router>\n            <ErrorBoundary>\n              <div style={backgroundStyle}>\n                <div\n                  style={{\n                    position: \"fixed\",\n                    top: 0,\n                    left: 0,\n                    width: \"100vw\",\n                    height: \"100vh\",\n                    zIndex: 0,\n                    pointerEvents: \"none\",\n                    background: isDarkMode\n                      ? \"rgba(0,0,0,0.5)\"\n                      : \"rgba(255,255,255,0.9)\",\n                  }}\n                />\n                <div className={`app ${isDarkMode ? \"dark\" : \"light\"}`}>\n                  {/* Navigation */}\n                  <Navigation\n                    isDarkMode={isDarkMode}\n                    setIsDarkMode={setIsDarkMode}\n                    isRefreshing={isRefreshing}\n                    handleRefresh={handleRefresh}\n                    isMobileNavOpen={isMobileNavOpen}\n                    setActiveTab={setActiveTab}\n                    coinsData={coinsData}\n                    searchQuery={searchQuery}\n                    setSearchQuery={setSearchQuery}\n                    setSelectedCrypto={setSelectedCrypto}\n                    setBetType={setBetType}\n                    setSelectedTimeframe={setSelectedTimeframe}\n                    setBetAmount={setBetAmount}\n                  />\n\n                  {/* Main Content */}\n                  <main className=\"main-content\">\n                    <div className=\"breadcrumb\">\n                      <span className=\"breadcrumb-item\">Kokitzu</span>\n                      <span className=\"breadcrumb-item active\">\n                        {window.location.pathname === \"/\" && \"Live Prices\"}\n                        {window.location.pathname === \"/betting\" &&\n                          \"Binary Options\"}\n                        {window.location.pathname === \"/portfolio\" &&\n                          \"Portfolio\"}\n                      </span>\n                    </div>\n\n                    {/* Search Functionality */}\n                    {window.location.pathname === \"/\" && (\n                      <div className=\"search-container\">\n                        <svg\n                          className=\"search-icon\"\n                          width=\"20\"\n                          height=\"20\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"2\"\n                        >\n                          <circle cx=\"11\" cy=\"11\" r=\"8\" />\n                          <path d=\"M21 21l-4.35-4.35\" />\n                        </svg>\n                        <input\n                          type=\"text\"\n                          className=\"search-input\"\n                          placeholder=\"Search cryptocurrencies...\"\n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                        />\n                      </div>\n                    )}\n\n                    <Routes>\n                      <Route\n                        path=\"/\"\n                        element={\n                          <LiveMarketData\n                            filteredCryptoData={filteredCryptoData}\n                            loading={loading}\n                            SkeletonCryptoCard={SkeletonCryptoCard}\n                            getPriceChange={getPriceChange}\n                            animatedPrices={animatedPrices}\n                            setSelectedCrypto={setSelectedCrypto}\n                            setBetType={setBetType}\n                          />\n                        }\n                      />\n                      <Route\n                        path=\"/betting\"\n                        element={\n                          <BinaryOptions\n                            coinsData={coinsData}\n                            data={data}\n                            loading={loading}\n                            SkeletonCryptoCard={SkeletonCryptoCard}\n                            selectedCrypto={selectedCrypto}\n                            setSelectedCrypto={setSelectedCrypto}\n                            selectedTimeframe={selectedTimeframe}\n                            setSelectedTimeframe={setSelectedTimeframe}\n                            betAmount={betAmount}\n                            setBetAmount={setBetAmount}\n                            betType={betType}\n                            setBetType={setBetType}\n                            getSelectedTimeframeInfo={getSelectedTimeframeInfo}\n                            handlePlaceBet={handlePlaceBet}\n                            showBetModal={showBetModal}\n                            setShowBetModal={setShowBetModal}\n                            getPriceChange={getPriceChange}\n                            animatedPrices={animatedPrices}\n                            activeBetsData={activeBetsData}\n                            getTimeLeft={getTimeLeft}\n                            currentPrice={getCurrentCrypto()?.price}\n                          />\n                        }\n                      />\n                      <Route\n                        path=\"/portfolio\"\n                        element={\n                          <Portfolio\n                            userStats={userStats}\n                            betHistoryLoading={betHistoryLoading}\n                            betHistoryData={betHistoryData}\n                            getTimeLeft={getTimeLeft}\n                            currentPrice={getCurrentCrypto()?.price}\n                          />\n                        }\n                      />\n                    </Routes>\n                  </main>\n\n                  {/* Bet Confirmation Modal */}\n                  <BetConfirmationModal\n                    showBetModal={showBetModal}\n                    setShowBetModal={setShowBetModal}\n                    selectedCrypto={selectedCrypto}\n                    betType={betType}\n                    betAmount={betAmount}\n                    getSelectedTimeframeInfo={getSelectedTimeframeInfo}\n                    handlePlaceBet={handlePlaceBet}\n                  />\n\n                  {/* Footer */}\n                  <footer className=\"footer\">\n                    <div className=\"footer-content\">\n                      <div className=\"footer-links\">\n                        <span>Powered by CoinGecko</span>\n                        <span>•</span>\n                        <span>Binary Options Trading</span>\n                      </div>\n                    </div>\n                  </footer>\n                </div>\n              </div>\n            </ErrorBoundary>\n          </Router>\n        </NetworkProvider>\n      </WalletProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}