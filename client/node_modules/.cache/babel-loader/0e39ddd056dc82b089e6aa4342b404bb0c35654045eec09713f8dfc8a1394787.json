{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from \"@apollo/client\";\nimport { GET_CRYPTO_PRICES } from \"../graphql/queries\";\n\n// Hook to get ETH price for conversion\nexport const useEthPrice = () => {\n  _s();\n  var _data$cryptoPrices, _data$cryptoPrices$fi;\n  const {\n    data\n  } = useQuery(GET_CRYPTO_PRICES);\n  const ethPrice = (data === null || data === void 0 ? void 0 : (_data$cryptoPrices = data.cryptoPrices) === null || _data$cryptoPrices === void 0 ? void 0 : (_data$cryptoPrices$fi = _data$cryptoPrices.find(crypto => crypto.symbol === \"ETH\")) === null || _data$cryptoPrices$fi === void 0 ? void 0 : _data$cryptoPrices$fi.price) || 0;\n  return ethPrice;\n};\n\n// Convert ETH to USD\n_s(useEthPrice, \"JtionF1PqWN50DPWu724eJIU2SM=\", false, function () {\n  return [useQuery];\n});\nexport const ethToUsd = (ethAmount, ethPrice) => {\n  return ethAmount * ethPrice;\n};\n\n// Convert USD to ETH\nexport const usdToEth = (usdAmount, ethPrice) => {\n  return ethPrice > 0 ? usdAmount / ethPrice : 0;\n};\n\n// Format USD amount\nexport const formatUsd = amount => {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\n// Format ETH amount\nexport const formatEth = amount => {\n  return `${amount.toFixed(4)} ETH`;\n};\n\n// Format combined ETH and USD display\nexport const formatEthWithUsd = (ethAmount, ethPrice, showEthSymbol = true) => {\n  const usdAmount = ethToUsd(ethAmount, ethPrice);\n  const ethSymbol = showEthSymbol ? \"Ξ \" : \"\";\n  return `${ethSymbol}${ethAmount.toFixed(4)} (${formatUsd(usdAmount)})`;\n};\n\n// Format USD with ETH equivalent\nexport const formatUsdWithEth = (usdAmount, ethPrice) => {\n  const ethAmount = usdToEth(usdAmount, ethPrice);\n  return `${formatUsd(usdAmount)} (Ξ ${ethAmount.toFixed(4)})`;\n};","map":{"version":3,"names":["useQuery","GET_CRYPTO_PRICES","useEthPrice","_s","_data$cryptoPrices","_data$cryptoPrices$fi","data","ethPrice","cryptoPrices","find","crypto","symbol","price","ethToUsd","ethAmount","usdToEth","usdAmount","formatUsd","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatEth","toFixed","formatEthWithUsd","showEthSymbol","ethSymbol","formatUsdWithEth"],"sources":["/Users/omribakish/Desktop/CryptoGraphQL/client/src/utils/currencyUtils.js"],"sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport { GET_CRYPTO_PRICES } from \"../graphql/queries\";\n\n// Hook to get ETH price for conversion\nexport const useEthPrice = () => {\n  const { data } = useQuery(GET_CRYPTO_PRICES);\n  const ethPrice =\n    data?.cryptoPrices?.find((crypto) => crypto.symbol === \"ETH\")?.price || 0;\n  return ethPrice;\n};\n\n// Convert ETH to USD\nexport const ethToUsd = (ethAmount, ethPrice) => {\n  return ethAmount * ethPrice;\n};\n\n// Convert USD to ETH\nexport const usdToEth = (usdAmount, ethPrice) => {\n  return ethPrice > 0 ? usdAmount / ethPrice : 0;\n};\n\n// Format USD amount\nexport const formatUsd = (amount) => {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n};\n\n// Format ETH amount\nexport const formatEth = (amount) => {\n  return `${amount.toFixed(4)} ETH`;\n};\n\n// Format combined ETH and USD display\nexport const formatEthWithUsd = (ethAmount, ethPrice, showEthSymbol = true) => {\n  const usdAmount = ethToUsd(ethAmount, ethPrice);\n  const ethSymbol = showEthSymbol ? \"Ξ \" : \"\";\n  return `${ethSymbol}${ethAmount.toFixed(4)} (${formatUsd(usdAmount)})`;\n};\n\n// Format USD with ETH equivalent\nexport const formatUsdWithEth = (usdAmount, ethPrice) => {\n  const ethAmount = usdToEth(usdAmount, ethPrice);\n  return `${formatUsd(usdAmount)} (Ξ ${ethAmount.toFixed(4)})`;\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,iBAAiB,QAAQ,oBAAoB;;AAEtD;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,kBAAA,EAAAC,qBAAA;EAC/B,MAAM;IAAEC;EAAK,CAAC,GAAGN,QAAQ,CAACC,iBAAiB,CAAC;EAC5C,MAAMM,QAAQ,GACZ,CAAAD,IAAI,aAAJA,IAAI,wBAAAF,kBAAA,GAAJE,IAAI,CAAEE,YAAY,cAAAJ,kBAAA,wBAAAC,qBAAA,GAAlBD,kBAAA,CAAoBK,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,MAAM,KAAK,KAAK,CAAC,cAAAN,qBAAA,uBAA7DA,qBAAA,CAA+DO,KAAK,KAAI,CAAC;EAC3E,OAAOL,QAAQ;AACjB,CAAC;;AAED;AAAAJ,EAAA,CAPaD,WAAW;EAAA,QACLF,QAAQ;AAAA;AAO3B,OAAO,MAAMa,QAAQ,GAAGA,CAACC,SAAS,EAAEP,QAAQ,KAAK;EAC/C,OAAOO,SAAS,GAAGP,QAAQ;AAC7B,CAAC;;AAED;AACA,OAAO,MAAMQ,QAAQ,GAAGA,CAACC,SAAS,EAAET,QAAQ,KAAK;EAC/C,OAAOA,QAAQ,GAAG,CAAC,GAAGS,SAAS,GAAGT,QAAQ,GAAG,CAAC;AAChD,CAAC;;AAED;AACA,OAAO,MAAMU,SAAS,GAAIC,MAAM,IAAK;EACnC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC;AACnB,CAAC;;AAED;AACA,OAAO,MAAMQ,SAAS,GAAIR,MAAM,IAAK;EACnC,OAAO,GAAGA,MAAM,CAACS,OAAO,CAAC,CAAC,CAAC,MAAM;AACnC,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACd,SAAS,EAAEP,QAAQ,EAAEsB,aAAa,GAAG,IAAI,KAAK;EAC7E,MAAMb,SAAS,GAAGH,QAAQ,CAACC,SAAS,EAAEP,QAAQ,CAAC;EAC/C,MAAMuB,SAAS,GAAGD,aAAa,GAAG,IAAI,GAAG,EAAE;EAC3C,OAAO,GAAGC,SAAS,GAAGhB,SAAS,CAACa,OAAO,CAAC,CAAC,CAAC,KAAKV,SAAS,CAACD,SAAS,CAAC,GAAG;AACxE,CAAC;;AAED;AACA,OAAO,MAAMe,gBAAgB,GAAGA,CAACf,SAAS,EAAET,QAAQ,KAAK;EACvD,MAAMO,SAAS,GAAGC,QAAQ,CAACC,SAAS,EAAET,QAAQ,CAAC;EAC/C,OAAO,GAAGU,SAAS,CAACD,SAAS,CAAC,OAAOF,SAAS,CAACa,OAAO,CAAC,CAAC,CAAC,GAAG;AAC9D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}